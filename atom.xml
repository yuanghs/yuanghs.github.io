<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雅客</title>
  <icon>https://www.gravatar.com/avatar/438cbd1eb014114334d46324817bc1d9</icon>
  <subtitle>往事随风</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-21T08:05:07.781Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>雅客</name>
    <email>1502841998@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置centos_minimal</title>
    <link href="http://yoursite.com/2018/07/21/%E9%85%8D%E7%BD%AEcentos-minimal/"/>
    <id>http://yoursite.com/2018/07/21/配置centos-minimal/</id>
    <published>2018-07-21T08:03:05.000Z</published>
    <updated>2018-07-21T08:05:07.781Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我只想说，我绝望了一次，不想再绝望第二次</p></blockquote><h5 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h5><ul><li>工作环境：VMware® Workstation 12 Pro 12.5.6 build-5528349</li><li>linux版本：CentOS-7-x86_64-Minimal-1611.iso</li></ul><p><strong>VMware安装镜像不多赘述，傻瓜操作！</strong></p><h5 id="万事第一步，把网络先连上"><a href="#万事第一步，把网络先连上" class="headerlink" title="万事第一步，把网络先连上"></a>万事第一步，把网络先连上</h5><blockquote><p>说句废话啊，CentOS-7-x86_64-Minimal，见名知意，其实就是精简版本的centos(DVD 版的镜像文件有4G多，精简版本的只有600多M)，关于这个精简啊，真的只能说无语，好多命令都不能用(比如：nano, ifconfig)，我们需要自己配置与安装很多东西。其中配置网络就是万事第一步，没有网络，寸步难行哦。</p></blockquote><ul><li>第一步：选中虚拟当前虚拟机右键<strong>设置</strong>——在弹出的窗口中选择<strong>网络适配器</strong>——在<strong>网络连接</strong>选项中选择 <strong>NAT模式</strong>——确定退出</li></ul><ul><li><p>第二步：激活centos中的网卡(ONBOOT=yes，默认是no)，这就是不能联网的原因(<strong>下面的操作都是root权限</strong>)</p><ol><li><p>cd /etc/sysconfig/network-scripts/ 命令进入，通过 ls 命令可以查看下面的文件</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/linux/network1.png" alt="image"></p></li><li><p>vi ifcfg-ens33 进入后编辑该文件，编辑如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">iTYPE</span>=Ethernet</span><br><span class="line"><span class="attr">BOOTPROTO</span>=dhcp</span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">PEERDNS</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">PEERROUTES</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_PEERDNS</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_PEERROUTES</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=stable-privacy</span><br><span class="line"><span class="attr">NAME</span>=ens33</span><br><span class="line"><span class="attr">UUID</span>=<span class="number">1</span>c4e0233-<span class="number">8</span>fca-<span class="number">47</span>f7-<span class="number">9</span>cf5-<span class="number">5</span>aa94e0319fa</span><br><span class="line"><span class="attr">DEVICE</span>=ens33</span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure></li><li><p>service network restart 命令敲一遍，相当重启一下服务，然后 ping <a href="http://www.baidu.com，我们惊奇的发现连上网络了。" target="_blank" rel="noopener">www.baidu.com，我们惊奇的发现连上网络了。</a></p></li></ol></li></ul><ul><li><p>第三步：其实前两步走完不出意外的话基本上就连上网络了，出了意外的话就自行百度啦。这一步就是给虚拟机配置一个静态IP，用于在客户端使用 xshell 等工具进行连接，就相当于把虚拟机当做一个服务器，然后客户端只需要连接服务端的一个固定IP就可以访问服务器了。其实看上面的配置文件中的 <strong>BOOTPROTO=dhcp</strong>，这个的意思就是说是一个动态IP，下面进行配置：</p><ol><li><p>进入文件的方式命令和前一步一样，进入后配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">iTYPE</span>=Ethernet</span><br><span class="line"><span class="attr">BOOTPROTO</span>=static</span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">PEERDNS</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">PEERROUTES</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_PEERDNS</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_PEERROUTES</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=stable-privacy</span><br><span class="line"><span class="attr">NAME</span>=ens33</span><br><span class="line"><span class="attr">UUID</span>=<span class="number">1</span>c4e0233-<span class="number">8</span>fca-<span class="number">47</span>f7-<span class="number">9</span>cf5-<span class="number">5</span>aa94e0319fa</span><br><span class="line"><span class="attr">DEVICE</span>=ens33</span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="number">192.168</span>.<span class="number">32.201</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="number">192.168</span>.<span class="number">32.2</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line"><span class="attr">DNS2</span>=<span class="number">8.8</span>.<span class="number">4.4</span></span><br></pre></td></tr></table></figure><p>BOOTPROTO=static 设置为静态IP，IPADDR 是自己的配置的ip，前三段不变，第四段改为自己设置的数字，NETMASK 是<br>子网掩码， GATEWAY 是网关。DNS1和DNS2是域名系统，这是基本配置(复制就行)。说一下怎么查看这几个配置：在VMware中点击<strong>编辑</strong>——点击<strong>虚拟网络编辑器</strong>——点击<strong>更改设置</strong>——选择<strong>VMnet8</strong>后点击<strong>NAT设置</strong>，就可以查看到基本配置。</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/linux/network2.png" alt="image"></p></li><li><p>service network restart 重启网络服务，使用 ip addr 就可以查看自己的网络配置了(无法使用 ifconfig命令，需要安装)。</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/linux/network3.png" alt="image"></p></li></ol></li></ul><h5 id="装点工具——先配置一个软件源"><a href="#装点工具——先配置一个软件源" class="headerlink" title="装点工具——先配置一个软件源"></a>装点工具——先配置一个软件源</h5><blockquote><p>网络连接上之后可以干的事情就多了，前面已经说了，好多命令是不能用的，这时就需要我们把它装上。但是，装软件的话是需要软件源的，centos默认的软件源下载很慢，这就需要我们配置一个软件源，我配置的是阿里的软件源。</p></blockquote><p><strong>在开始之前先介绍一个命令 yum :yellowdog updater modified , 这老家伙就是用了下载各种工具的boss，还是很牛叉的！对于我们这个精简版本来说，他需要经常上场。</strong></p><ul><li>第一步：备份原来的默认源(其实就是重命名) mv /etc/yum.repos.d/CentOS.repo.backup</li></ul><ul><li>第二步：curl -o /etc/yum.repos.d/ali.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a> 使用这个命令就可以把阿里的源配置为自己的默认源。ls 命令查看如下：</li></ul><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/linux/repo.png" alt="image"></p><ul><li><p>第三步就是装工具了(工具就会从我们刚刚配置的源进行下载)</p>  <figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//基本名介绍：</span></span><br><span class="line">   </span><br><span class="line">   <span class="symbol">$</span>&gt;yum list<span class="comment">//列出所有软件包</span></span><br><span class="line"><span class="symbol">$</span>&gt;yum list installed<span class="comment">//列出已经安装的软件包</span></span><br><span class="line"><span class="symbol">$</span>&gt;yum list installed | grep nano<span class="comment">//列出已经安装的软件包</span></span><br><span class="line"><span class="symbol">$</span>&gt;yum search nano<span class="comment">//在yum的软件源中搜索软件 </span></span><br><span class="line"><span class="symbol">$</span>&gt;yum remove nano<span class="comment">//卸载软件</span></span><br><span class="line"><span class="symbol">$</span>&gt;yum -y install nano<span class="comment">//直接安装，不需要yes确认.</span></span><br><span class="line"><span class="symbol">$</span>&gt;yum list installed | grep nano<span class="comment">//查看是否安装了Nano</span></span><br><span class="line">   </span><br><span class="line">   <span class="symbol">$</span>&gt;sudo yum install --downloadonly --downloaddir=/home/centos/rpms nano <span class="comment">//只下载, 不安装</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span>&gt;sudo yum reinstall --downloadonly--downloaddir=/home/centos/rpms nano<span class="comment">//重新下载，不安装</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span>&gt;sudo yum localinstall xxx.rpm<span class="comment">//从本地rpm文件直接安装软件</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span>&gt;yum -y install nano         <span class="comment">//直接安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本工具安装(建议下面的都安装)：</span></span><br><span class="line"><span class="symbol">$</span>&gt;yum -y install net-tools<span class="comment">//安装网络工具(可以使用 ifconfig 命令了)</span></span><br><span class="line"><span class="symbol">$</span>&gt;yum -y install gcc            <span class="comment">//安装gcc编译工具</span></span><br><span class="line"><span class="symbol">$</span>&gt;yum -y install kenel-devel</span><br><span class="line"><span class="symbol">$</span>&gt;yum -y install mkisofs        <span class="comment">//用于制作 .iso 文件</span></span><br><span class="line">   </span><br><span class="line">   其余的用到了假如有提示的话再安装即可。</span><br></pre></td></tr></table></figure></li></ul><h5 id="共享文件夹——安装虚拟机增强工具"><a href="#共享文件夹——安装虚拟机增强工具" class="headerlink" title="共享文件夹——安装虚拟机增强工具"></a>共享文件夹——安装虚拟机增强工具</h5><blockquote><p>共享文件夹必不可少，这可是重中之重哦。桌面版的还好，这个minmal版的就要麻烦一些，所以上面建议安装的工具都要装上，要不然会很麻烦。、</p></blockquote><p>&emsp;其实假如使用VMware的虚拟机增强工具，点击安装或更新的话他会自动挂载，如果使用centos的桌面版的话，我们直接可以在桌面上看到，但是minimal版的话由于只能使用命令，所以相对麻烦一些，我相对习惯于使用手动挂载，就是把这个工具制作成一个 .iso 镜像文件，然后挂载到minimal中。</p><p>下面介绍一下如何制作一个 .iso 文件，其实这就是一个归档打包的过程(root权限)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt;mkisofs -r -o linux.iso <span class="regexp">/home/</span>centos<span class="regexp">/linux/</span>/-<span class="string">r :</span> 保留原文件,-<span class="string">o:</span>输出的iso文件名</span><br></pre></td></tr></table></figure><p>挂载vmware安装目录下的linux.iso(虚拟机增强工具镜像文件)文件：</p><ol><li>$&gt; mkdir /mnt/cdrom       //在mnt文件夹下新建cdrom文件夹</li><li>插入镜像：打开设置——选项——共享文件夹(总是启用)——添加一个共享文件夹</li><li>$&gt; mount /dev/cdrom /mnt/cdrom   //挂载设备</li><li>$&gt; cp /mnt/cdrom/* /homn/centos/linux   //将cdrom中的文件复制到Linux目录下</li></ol><p>下面就是关键部分了，其实到这里的话就很easy了：</p><ol><li>$&gt; cd /home/centos/linux    //进入linux文件夹</li></ol><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/linux/share.png" alt="image"></p><ol start="2"><li>$&gt; tar -xzf VMwareTools-10.1.6-5214329.tar.gz 解压后会出现 vmware-tools-distrib，进入该文件夹</li></ol><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/linux/share1.png" alt="image"></p><ol start="3"><li>$&gt; ./vmware-install.pl 执行该文件， 后面出现的询问都闭着眼睛回车，一直到最后出现 Enjoy， 那么恭喜你，成功了。下面就可以查看共享文件夹了：cd /mnt/hgfs/ 下面就是你的共享文件夹了。</li></ol><ul><li><strong>分享一个链接，一个命令大全：</strong><br><a href="https://www.centoschina.cn/" target="_blank" rel="noopener">https://www.centoschina.cn/</a></li><li><strong>推荐书籍：</strong><br>《Linux命令行与shell脚本编程大全》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我只想说，我绝望了一次，不想再绝望第二次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;工
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>线程基础知识</title>
    <link href="http://yoursite.com/2018/05/05/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/05/05/线程基础知识/</id>
    <published>2018-05-05T01:37:59.000Z</published>
    <updated>2018-05-05T05:29:47.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul><li><strong>什么是进程：</strong> 我们先看看比较官方的表述，进程是操作系统结构的基础，是一次程序的执行，是一个程序及其数据在处理机上顺序执行时所发生的活动；是程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</li></ul><p>&emsp;其实关于进程的官方定义也是很好懂，但是我们都不太喜欢过于官方的东西，还是来点比较实在解释比较好。进程就是我们打开的一个个应用程序，每一个应用程序都有属于自己的一个端口号，操作系统为每一个应用程序分配内存空间后，端口号成为了应用程序在任务队列的标识(就好比是程序在内存中的地址，独一无二)，只要应用程序没有被关闭，操作系统没有回收应用程序所占的空间，则程序一直占有内存。这也就是为什么有些时候打开应用程序时我们会遇到端口已经被占用的问题(最好的例子，你在IDE中打开了Tomcat，那么在外部就不能重复打开)，因为在同一个时刻内只能有一个应用程序独占同一段内存空间，这就是进程。再通俗一点，就是任务管理器里面的进程队列：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E8%BF%9B%E7%A8%8B.JPG" alt=""></p><ul><li><strong>什么是线程：</strong> 刚开始听到线程的时候可能会感觉有点懵，脑袋有点转不过弯来，就拿学习Java的过程来说吧，刚开始学习啥是面向对象啊，异常啊，泛型啊，集合啊什么的，虽然开始接触时会有点难以理解，但是慢慢的，随着学习的深入，总是有迹可循的。但是线程这部分知识给我的感觉很独特，那就是学了感觉懂一点，但是总觉得抓不住精髓，所以往往是无从下手。后来，好好磨了一下这部分知识，感觉抓到一点头绪了，现在我就说说我眼中的线程：前面介绍了进程，我们知道了进程就好比一个个的应用程序，我们可以同时打开多个应用程序，边听歌边打游戏，操作系统则对这些应用进行调度，对于这一个个的进程，操作系统就是掌握他们生杀大权的上帝。理解了这个，我们来理解线程就会很容易了，<strong>线程就好比进程中一个个独立的子任务</strong>，进程就好比操作系统，是所有线程的上帝。以次类推，在一个进程中，就拿QQ来说，我们可以边聊天，边下载QQ文件，边发送表情，这些功能就好比一个个的线程，并同时在后台默默运行，应用程序则进行总的调度。</li></ul><blockquote><p>&emsp;补充一点：在开始学习Java的时候(或者是C, C++等)，我们都知道程序的入口是main，其实学习了线程后我们将了解到，main其实也是一个线程，它有一个特殊的名字：主线程(main线程)，所以说，我们原先编写的程序大多是单线程的程序(只用到了主线程)。而Java中的多线程的编程，就是为了让我们掌握关于多任务多功能并行处理的能力，现在我们就进入多线程编程之旅。</p></blockquote><h3 id="创建线程的四种方式"><a href="#创建线程的四种方式" class="headerlink" title="创建线程的四种方式"></a>创建线程的四种方式</h3><p>&emsp;在我们没学习多线程之前，main线程就是默认线程，程序的所有运算都在主线程上执行，main线程是为我们提供好的程序入口(main方法)，不需要我们去创建。但假如我们需要其他的子线程去帮助我们执行其他的任务，那么就需要创建新的线程，下面就介绍四种创建线程的方式：</p><h4 id="第一种——继承Thread类"><a href="#第一种——继承Thread类" class="headerlink" title="第一种——继承Thread类"></a>第一种——继承Thread类</h4><ul><li><strong>Thread类简介：</strong> Thread类是JDK1.0时就提供的一个线程类，它为Java提供了多线程编程的能力，每一个Java类只需要继承Thread类，并重写其中的run()方法，那么该类就是一个新的子线程。程序示例如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> time = (<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">                Thread.sleep(time);</span><br><span class="line">                System.out.println(<span class="string">"run="</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">            myThread.setName(<span class="string">"myThread"</span>);</span><br><span class="line">            myThread.start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> time = (<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">                Thread.sleep(time);</span><br><span class="line">                System.out.println(<span class="string">"main="</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种——实现Runnable接口"><a href="#第二种——实现Runnable接口" class="headerlink" title="第二种——实现Runnable接口"></a>第二种——实现Runnable接口</h4><p>&emsp;继承Thread类固然是一种简单的创建线程的方式，但是由于Java中的单继承机制，使得继承了Thread类就不能再继承其他的类，这是不利于扩展的。所以可以使用另一种方式，实现Runnable接口。Runnable接口是一个公共协议，里面只提供了一个run()方法。其实，Thread类也同样实现了Runnable接口，所以通过继承Thread类得到线程和实现Runnable接口得到线程没有区别，只是实现Runnable接口更容易扩展。程序示例如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">第一种方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="title">implements</span> <span class="title">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          System.<span class="keyword">out</span>.println(<span class="string">"运行中!"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Run</span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;    </span><br><span class="line">         <span class="comment">//new一个线程对象</span></span><br><span class="line">         Runnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">         <span class="comment">//将线程对象传给Thread的构造器</span></span><br><span class="line">         Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">         <span class="comment">//启动线程</span></span><br><span class="line">         thread.start()  </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">第二种方法：使用匿名内部类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Run</span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;    </span><br><span class="line">         <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">           @Override</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               System.<span class="keyword">out</span>.println(<span class="string">"运行中!"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三种——实现Callable接口"><a href="#第三种——实现Callable接口" class="headerlink" title="第三种——实现Callable接口"></a>第三种——实现Callable接口</h4><p>&emsp;上面的两种创建线程方式是我们比较熟悉的，其实一直到JDK 1.5之前，创建线程的也只有上面的两种。在JDK 1.5 之后，Java对线程做出了更加丰富的扩充，添加了一个java.util.concurrent的包(多线程编程者的福音)，里面提供了更多更加丰富，功能更加完善的方法，其中在创建线程方面也做了扩充，而实现Callable接口创建线程就是其中一种方法。下面是代码示例：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//可以抛出异常，有返回值</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Integer call() throws Excetion&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">sum</span> += i;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">sum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Callable需要FutureTask类的支持来获取返回值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        ThreadDemo td = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用FutureTask，接收运算结果</span></span><br><span class="line">        FutureTask&lt;Integer&gt; result = <span class="keyword">new</span> FutureTask&lt;&gt;(td);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(result).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收线程运算后的结果</span></span><br><span class="line">        Integer <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//分线程运算完成后执行，得到线程运算的结果</span></span><br><span class="line">            <span class="keyword">sum</span> = result.get();</span><br><span class="line">            System.out.println(<span class="keyword">sum</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;通过对比实现Runnable和实现Callable，我们会发现比较有趣的地方：</p><ul><li>实现Runnable接口，run()方法没有返回值，且run()方法不能抛出异常</li><li>实现Callable接口，call()方法有返回值，且可以抛出异常</li></ul></blockquote><blockquote><p>&emsp;其实这两个方法就设计的就很有意思，run翻译过来就是执行的意思，也就是说我给你一个任务，你只要负责把它做完，其他的不用你操心，做完了也不用告诉我(不叫你哔哔你就别哔哔)。而call翻译过来有打电话的意思，打电话肯定要有回音啊(你必须哔哔)，而且占线了(对不起，电话暂时无法接通…)是不是要说一声啊(抛异常)。</p></blockquote><h4 id="第四种——通过线程池来创建线程"><a href="#第四种——通过线程池来创建线程" class="headerlink" title="第四种——通过线程池来创建线程"></a>第四种——通过线程池来创建线程</h4><p>&emsp;其实上面提供的几种创建线程的方法在项目开发中是不常用的，因为假如出现这种情况：如果并发的线程数量特别多，并且每个线程只执行很短的时间就被销毁，这样频繁的创建和销毁线程会大大降低系统的效率。在JDK 1.5之前遇到这样的问题我们也只能干瞪眼，但是在JDK 1.5之后，我们却有能力对这种情况作出改善，那就是创建一个线程池(Executor, java.util.concurrent包下的Executor接口)，下面只介绍如何通过线程池去创建线程，关于线程池的详细构造与说明请看另一篇笔记。下面是程序示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Executors工具类创建线程池</span></span><br><span class="line">       <span class="comment">//ExecutorService pool = Executors.newFixedThreadPool(5);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用ThreadPoolExecutor创建线程</span></span><br><span class="line">        ExecutorService pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">20</span>, <span class="number">3</span>,</span><br><span class="line">                      TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        ThreadA t = <span class="keyword">new</span> ThreadA();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        pool.execute(t);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;其实准确来说，线程池不能说成是创建线程的方式，而是提供了一个线程队列，避免了额外的创建于开销。这有点向JDBC中的数据库连接池，池子里面已经准备好了一些数据库连接，需要的时候就从池子里面取就行了。</p></blockquote><h3 id="Thread中的API介绍"><a href="#Thread中的API介绍" class="headerlink" title="Thread中的API介绍"></a>Thread中的API介绍</h3><p>&emsp;通过上面的介绍，我们已经知道了什么是线程，如何去创建一个线程，下面就介绍一下Thread类中的几个重要API(关于java.util.concurrent的包中的类与API后续笔记会有说明，但是其实很多方法都是Thread中方法的衍生或补充)进行介绍。</p><ul><li><p><strong>start()：</strong> 使当前线程开始执行，Java虚拟机调用该线程的run()方法</p></li><li><p><strong>sleep(long millis)：</strong> 在指定的毫秒数内让正在执行的线程休眠(暂停执行)。<strong>注意，这是一个静态方法，直接使用 Thread.sleep() 调用，并且该方法会抛出InterruptedException(中断异常)</strong></p></li><li><p><strong>currentThread()：</strong> 放回当前正在执行的线程对象的引用。这是一个静态方法，使用Thread.currentThread()调用。</p></li><li><p><strong>getId()：</strong> 返回该线程的标识符。线程ID是一个正的long值，在创建线程时生成，并且是唯一的，终生不变。在线程终止时，该线程ID可以被重新使用。</p></li><li><p><strong>getState()：</strong> 返回该线程的状态。线程由如下几种状态：</p><ol><li><strong>NEW：</strong> 线程实例化后还未执行start()方法时的状态</li><li><strong>RUNNABLE：</strong> 线程进入运行状态</li><li><strong>TERMINATED：</strong> 线程被销毁时的状态</li><li><strong>BLOCKED：</strong> 某一线程等待锁</li><li><strong>WAITING：</strong> 线程执行了Object.wait()方法后出现的状态</li></ol></li><li><p><strong>setName()：</strong> 设置当前线程的名字</p></li><li><p><strong>getName()：</strong> 返回当前线程的名字</p></li><li><p><strong>isAlive()：</strong> 测试当前线程是否处于活动状态(如果线程已经启动且尚未终止，则为活动状态)</p></li><li><p><strong>setPriority(int newPriority)：</strong> 更改线程的优先级。下面对线程优先级进行说明：</p></li></ul><p>&emsp;&emsp;在Java中，线程的优先级分为1~10个等级，如果优先级小于1或大于10，则抛出IllegalArgumentExceptin()异常。在JDK中使用三个常量定义了三个优先级的值：</p><pre><code>- public final static int MIN_PRIORITY = 1;- public final static int NORM_PRIORITY=5;- public final static int MAX_PRIORITY=10;- 高优先级的线程总是大部分先执行完，但不代表高优先级的线程都执行完- 并非先被main线程调用就会先执行完- 当线程的优先级等级差距很大时，谁先执行与调用顺序无关</code></pre><p>&emsp;&emsp;<strong>注意：不要把线程的优先级与运行结果的顺序作为衡量标准，线程优先级与打印顺序无关，这说明线程的优先级还具有一定的随机性</strong></p><ul><li><p><strong>getPriority(int newPriority)：</strong> 返回线程的优先级</p></li><li><p><strong>interrupted()：</strong> 测试当前线程是否已经中断(静态方法)。线程的中断状态由该方法清除，如果两次调用该方法，第二次将返回false(假如第一次调用时当前线程处于中断状态，在返回true的同时把中断状态清除，第二次调用时将返回false)</p></li><li><p><strong>isInterrupted()：</strong> 测试当前线程是否已经中断(不是静态方法，不会清除中断状态)</p></li><li><p><strong>interrupt()：</strong> 中断当前线程</p></li><li><p><strong>yield()：</strong> 暂停当前正在执行的线程对象，并执行其他线程(放弃当前的CPU资源，将它让给其他任务去占用CPU时间，但放弃时间不确定)</p></li><li><p><strong>join()：</strong> 等待线程终止。<strong>理解：主线程等待子线程终止。main是主线程，在main线程中创建子线程thread，并在main线程中调用thread.join()，那么main线程要等待thread线程执行后再执行。</strong></p></li></ul><blockquote><p>&emsp;&emsp;具体解释：在很多情况下，主线程生成并启动了子线程，如果子线程里要进行大量的耗时运算，主线程往往将在子线程之前结束，但是如果主线程处理完其他的事物后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这时就需要用到join()方法。<strong>join()方法具有使线程排队运行的作用，有些类似于同步的运行效果。join与synchronized的区别是：join在内部使用wait()方法进行等待，而synchronized关键字使用的是“对象监视器”原理做为同步</strong></p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面给出的是join()方法的示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JoinThread</span> <span class="title">extends</span> <span class="title">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> secondValue = (<span class="keyword">int</span>) (Math.random() * <span class="number">10000</span>);</span><br><span class="line">            System.<span class="keyword">out</span>.println(secondValue);</span><br><span class="line">            Thread.sleep(secondValue);</span><br><span class="line">         &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            JoinThread joinThread = <span class="keyword">new</span> JoinThread();</span><br><span class="line">            joinThread.start();</span><br><span class="line">            joinThread.<span class="keyword">join</span>();</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"当joinThread对象执行完毕后再执行!"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this和Thread-currentThread"><a href="#this和Thread-currentThread" class="headerlink" title="this和Thread.currentThread()"></a>this和Thread.currentThread()</h3><p>&emsp;刚开始学习线程的时候可能会对this和Thread.currentThread()有点迷，傻傻分不清这两个到底有什么区别，现在我就来详细解释一下这两个的区别和联系，先看一段代码，通过结果来分析。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountOperate</span> <span class="title">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CountOperate() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----cbegin---"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器里面有一个主线程main，其他线程由主线程产生，所以当前线程为main</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Thread.currentThread.getName: "</span> + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Thread.currentThread.isAlive: "</span> + Thread.currentThread().isAlive());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示当前线程对象</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"this.getName: "</span> + <span class="keyword">this</span>.getName());</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"this.isAlive: "</span> + <span class="keyword">this</span>.isAlive());</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"----cend----"</span>);</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void run() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----rbegin---"</span>);</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Thread.currentThread.getName: "</span> + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Thread.currentThread.isAlive: "</span> + Thread.currentThread().isAlive());</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"this.getName: "</span> + <span class="keyword">this</span>.getName());</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"this.isAlive: "</span> + <span class="keyword">this</span>.isAlive());</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"----rend----"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//生产一个线程对象</span></span><br><span class="line">        CountOperate c = new CountOperate();</span><br><span class="line">        <span class="comment">//将前面生产的一个线程对象作为构造参数传给Thread再生产一个线程对象</span></span><br><span class="line">        Thread thread = new Thread(c);</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"main begin thread isAlive="</span> + thread.isAlive());</span><br><span class="line"></span><br><span class="line">         thread.setName(<span class="string">"A"</span>);</span><br><span class="line">         thread.start();</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"main end thread isAlive="</span> + thread.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">-----cbegin---</span><br><span class="line">Thread.currentThread.getName: main</span><br><span class="line">Thread.currentThread.isAlive: <span class="literal">true</span></span><br><span class="line"><span class="keyword">this</span>.getName: Thread<span class="number">-0</span></span><br><span class="line"><span class="keyword">this</span>.isAlive: <span class="literal">false</span></span><br><span class="line">----cend----</span><br><span class="line"></span><br><span class="line">main begin thread isAlive=<span class="literal">false</span></span><br><span class="line">main end thread isAlive=<span class="literal">true</span></span><br><span class="line">-----rbegin---</span><br><span class="line">Thread.currentThread.getName: A</span><br><span class="line">Thread.currentThread.isAlive: <span class="literal">true</span></span><br><span class="line"><span class="keyword">this</span>.getName: Thread<span class="number">-0</span></span><br><span class="line"><span class="keyword">this</span>.isAlive: <span class="literal">false</span></span><br><span class="line">----rend----</span><br></pre></td></tr></table></figure><p>&emsp;<strong>this是什么：</strong> 如果线程类是继承java.lang.Thread，那么线程类就可以使用this关键字去调用继承自父类的Thread方法，this代表当前的线程对象.</p><p>&emsp;<strong>Thread.currentThread()：</strong> Thread.currentThread()可以获取当前线程的引用，一般是在没有线程对象又需要获得线程信息时可以通过Thread.currentThread()获得当前代码段所在线程的引用。</p><p>&emsp;<strong>this和Thread.currentThread()的区别：</strong></p><ul><li><p><strong>在构造器中，this代表的是当前线程对象(通过构造器生成的线程对象)，但是由于线程对象正在生产，还没有start，所以线程状态为false。但是在构造器中，Thread.currentThread()表示的是mian线程(main线程是主线程，其实并非所有的线程都是我们手动开启，还有一些线程是JVM自动开启的，比如垃圾回收线程，主线程等)，所以线程状态为true。</strong></p></li><li><p><strong>在run方法中，this和Thread.currentThread()代表的都是当前线程对象的引用。由于线程已经start，所以线程状态就是true</strong></p></li></ul><h4 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h4><ul><li>《Java多线程编程核心技术》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;进程与线程&quot;&gt;&lt;a href=&quot;#进程与线程&quot; class=&quot;headerlink&quot; title=&quot;进程与线程&quot;&gt;&lt;/a&gt;进程与线程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;什么是进程：&lt;/strong&gt; 我们先看看比较官方的表述，进程是操作系统结构的基础，是一
      
    
    </summary>
    
      <category term="Java线程" scheme="http://yoursite.com/categories/Java%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多线程编程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面向对象六大原则——开闭原则</title>
    <link href="http://yoursite.com/2018/04/28/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2018/04/28/面向对象六大原则——开闭原则/</id>
    <published>2018-04-28T09:41:35.000Z</published>
    <updated>2018-04-28T14:30:47.424Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是开闭原则-Open-Close-Principle-OCP"><a href="#什么是开闭原则-Open-Close-Principle-OCP" class="headerlink" title="什么是开闭原则(Open Close Principle, OCP)"></a>什么是开闭原则(Open Close Principle, OCP)</h4><p>&emsp;<strong>开闭原则</strong>是Java中最基础的设计原则，它指导我们如何建立一个稳定的，灵活的系统。</p><ul><li><strong>定义：</strong>一个软件实体如类，模块和函数应该对扩展开放，对修改关闭。</li><li><strong>为什么使用开闭原则：</strong> 在程序的生命周期内，因为变化，升级和维护等原因需要对程序原有的代码进行修改时，可能会给代码引入错误，增加项目开发测试的复杂度，也可能会使我们不得不对整个功能进行重构，而且还要对原有的代码进行测试。</li></ul><h4 id="开闭原则——我是你们的爸爸"><a href="#开闭原则——我是你们的爸爸" class="headerlink" title="开闭原则——我是你们的爸爸"></a>开闭原则——我是你们的爸爸</h4><p>&emsp;开闭原则是一个非常基础的原则，其他的五个原则都是开闭原则的具体，也就是说其他的五个原则是指导设计的工具和方法，而开闭原则才是它们的精神领袖。从另一个角度说，开闭原则就是抽象类，其他五大原则是具体的实现类，开闭原则是一种纲领性的框架，五大原则在这个框架里添砖加瓦。所以这么说吧，只要我们遵守好其他的五大原则，那么我们设计的软件自然就遵守了开闭原则，现在我们再好好回顾一下其他五大原则：</p><ul><li><a href="https://yuanghs.github.io/2018/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="noopener"><strong>单一职责原则</strong></a>：应该有且仅有一个原因引起类的变更(一个接口或一个类只有一个原则，它就只负责一件事)</li><li><a href="https://yuanghs.github.io/2018/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E5%BC%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="noopener"><strong>里式替换原则</strong></a>：子类型必须能替换掉它们的基类型</li><li><a href="https://yuanghs.github.io/2018/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="noopener"><strong>依赖倒置原则</strong></a>：<ol><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象</li></ol><ul><li>抽象不应该依赖细节</li><li>细节应该依赖抽象</li></ul></li><li><a href="https://yuanghs.github.io/2018/04/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="noopener"><strong>接口隔离原则</strong></a>：<ol><li>客户端不应该依赖它不需要的接口</li></ol><ul><li>类间的依赖关系应该建立在最小的接口上</li></ul></li><li><a href="https://yuanghs.github.io/2018/04/28/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/" target="_blank" rel="noopener"><strong>迪米特法则</strong></a>：只与直接朋友进行通信</li></ul><p>&emsp;简单总结上面的五大原则就是：单一职责原则告诉我们实现类要职责单一；里式替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向抽象编程；接口隔离原则告诉我们设计接口要精简单一；迪米特法则告诉我们要降低耦合。而开闭原则告诉我们：要对修改关闭，对扩展开放。其实只要我们想一想，前面的五大原则一直反复强调的，几乎每一个原则都在强调的宗旨是什么：解耦，单一，高内聚——这不就是开闭原则的精神纲领吗。</p><p><strong>把开闭原则应用于实际项目中，我们需要注意至关重要的一点：抽象约束</strong><br>&emsp;抽象是对一组事物的通用描述，没有具体的实现，也就表示它可以有非常多的可能性，可以跟随需求的变化而变化。因此，通过接口或抽象类可以约束一组可能变化的行为，并且能够实现对扩展开放，其包含三层含义：</p><ul><li><strong>通过接口或抽象类约束扩展，对扩展进行边界限定，不允许出现在接口或抽象类中不存在的public方法</strong></li><li><strong>参数类型、引用对象尽量使用接口或者抽象类，而不是实现类</strong></li><li><strong>抽象层尽量保持稳定，一旦确定即不允许修改</strong></li></ul><h4 id="参考书籍与链接"><a href="#参考书籍与链接" class="headerlink" title="参考书籍与链接"></a>参考书籍与链接</h4><ul><li>《设计模式之禅》</li><li><a href="https://blog.csdn.net/zhengzhb/article/details/7296944" target="_blank" rel="noopener">https://blog.csdn.net/zhengzhb/article/details/7296944</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是开闭原则-Open-Close-Principle-OCP&quot;&gt;&lt;a href=&quot;#什么是开闭原则-Open-Close-Principle-OCP&quot; class=&quot;headerlink&quot; title=&quot;什么是开闭原则(Open Close Principle
      
    
    </summary>
    
      <category term="面向对象六大原则" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="六大原则" scheme="http://yoursite.com/tags/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面向对象六大原则——迪米特法则</title>
    <link href="http://yoursite.com/2018/04/28/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2018/04/28/面向对象六大原则——迪米特法则/</id>
    <published>2018-04-28T09:41:02.000Z</published>
    <updated>2018-04-28T11:45:03.155Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是迪米特法则-Law-of-Demeter-LoD"><a href="#什么是迪米特法则-Law-of-Demeter-LoD" class="headerlink" title="什么是迪米特法则(Law of Demeter, LoD)"></a>什么是迪米特法则(Law of Demeter, LoD)</h4><p>&emsp;迪米特法则也可以称为最少知识法则(Least Knowledge Principle, LKP)。它们都描述了一个规则：一个对象应该对其他对象有最少的了解。通俗来说，一个类应该对自己需要耦合或调用的类知道最少，也就是对于被依赖的类，向外公开的方法应该尽可能的少。</p><p>&emsp;迪米特法则还有一种解释：<strong>Only talk to your immediate friends，只与直接朋友进行通信</strong>。关于朋友给出如下解释：两个对象之间的耦合关系称之为朋友，通常有依赖，关联，聚合，组成等。而直接朋友通常表现为关联，聚合和组成关系，即两个对象之间联系更为紧密，通常以成员变量，方法参数和返回值的形式出现。</p><h4 id="LoD实例演示"><a href="#LoD实例演示" class="headerlink" title="LoD实例演示"></a>LoD实例演示</h4><p>&emsp;迪米特法则强调了下面两点：</p><ul><li>从被依赖者的角度：只暴露应该暴露的方法或属性，即编写相关的类时确定方法和属性的权限</li><li>从依赖者的角度来看，只依赖应该依赖的对象</li></ul><blockquote><p><strong>先举例演示第一点：当我们按下计算机的按钮的时候，计算机会指行一系列操作：保存当前任务，关闭相关服务，接着关闭显示屏，最后关闭电源，这些操作完成则计算机才算关闭。如下是代码示例：</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算机类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCurrentTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeScreen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closePower</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        saveCurrentTask();</span><br><span class="line">        closeService();</span><br><span class="line">        closeScreen();</span><br><span class="line">        closePower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> Computer c;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clickCloseButton</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//现在你要开始关闭计算机了，正常来说你只需要调用close（）方法即可，</span></span><br><span class="line">      <span class="comment">//但是你发现Computer所有的方法都是公开的，该怎么关闭呢？于是你写下了以下关闭的流程：        </span></span><br><span class="line">        c.saveCurrentTask();</span><br><span class="line">        c.closePower();</span><br><span class="line">        c.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//亦或是以下的操作        </span></span><br><span class="line">        c.closePower();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//还可能是以下的操作</span></span><br><span class="line">        c.close();</span><br><span class="line">        c.closePower();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;观察上面的代码我们发现了什么问题：对于人来说，我期待的结果只是按下关闭电钮然后计算机“啪”的给我关了，而不是需要我去小心的去保存当前正在执行的任务等等。在上面的代码中，c是一个完全暴露的对象，它的方法是完全公开的，对于Person来说，手里面就如同多出了好几把钥匙，至于具体用哪一把他不知道，所以只能一把一把的去试一遍，显然这样的设计是不对的。</p><p>&emsp;根据迪米特法则的第一点：从被依赖者的角度，只暴露应该暴露的方法。在本例中，应该暴露的方法就是close()，关于计算机的其他操作不是依赖者应该关注的问题，应该对依赖者关闭，重新设计如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算机类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveCurrentTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeScreen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closePower</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        saveCurrentTask();</span><br><span class="line">        closeService();</span><br><span class="line">        closeScreen();</span><br><span class="line">        closePower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> Computer c;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">clickCloseButton</span><span class="params">()</span></span>&#123;</span><br><span class="line">       c.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>现在举例演示第二点：在我们生活中会有这样的情况，比如张三去找李四帮忙做一件事，对于李四来说这件事也很棘手，李四也做不了，但是李四有一个好哥们王五却能完成这件事，所以李四就把这件事交给王五去办(在本例中，张三和王五是不认识的)。现在我们暂定张三为A，李四为B，王五为C，代码示例如下：</strong></p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//张三找李四办事</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">true<span class="keyword">public</span> String name;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">A</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.name = name;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> B <span class="title">getB</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="keyword">new</span> B(name);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">truetrueB b = getB(<span class="string">"李四"</span>);</span><br><span class="line">truetrueC c = b.getC(<span class="string">"王五"</span>);</span><br><span class="line">truetruec.work();</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//李四办不了于是去找王五</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">true<span class="keyword">private</span> String name;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">B</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.name = name;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> C <span class="title">getC</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="keyword">new</span> C(name);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于王五来说so easy，办得妥妥的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">true<span class="keyword">public</span> String name;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">C</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.name = name;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">truetrueSystem.<span class="keyword">out</span>.println(name + <span class="string">"把这件事做好了"</span>);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> &#123;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">truetrueA a = <span class="keyword">new</span> A(<span class="string">"张三"</span>);</span><br><span class="line">truetruea.work();</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：王五把事情做好了</span><br></pre></td></tr></table></figure><p>&emsp;上面的设计输出答案是正确的，王五确实把事情办妥了。但是我们仔细看业务逻辑确发现这样做事不对的。张三和王五互相不认识，那为什么代表张三的A类中会有代表李四的C类呢？这样明显是违背了迪米特法则的。现在我们对上面的代码进行重构，根据迪米特法则的第二点：从依赖者的角度来看，只依赖应该依赖的对象。在本例中，张三只认识李四，那么只能依赖李四。重构后代码如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//张三认识李四，只依赖李四</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">true<span class="keyword">public</span> String name;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">A</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.name = name;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> B <span class="title">getB</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="keyword">new</span> B(name);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">truetrueB b = getB(<span class="string">"李四"</span>);</span><br><span class="line">truetrueb.work();</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//李四依赖王五</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">true<span class="keyword">private</span> String name;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">B</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.name = name;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> C <span class="title">getC</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="keyword">new</span> C(name);</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">truetrueC c = getC(<span class="string">"王五"</span>);</span><br><span class="line">truetruec.work();</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//王五把事情办得妥妥的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">true<span class="keyword">public</span> String name;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">C</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.name = name;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">truetrueSystem.<span class="keyword">out</span>.println(name + <span class="string">"把这件事做好了"</span>);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> &#123;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">truetrueA a = <span class="keyword">new</span> A(<span class="string">"张三"</span>);</span><br><span class="line">truetruea.work();</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：王五把事情做好了</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;迪米特法则的目的是让类之间解耦，降低耦合度，提高类的复用性。但是设计原则并非有利无弊，使用迪米特法则会产生大量的中转类或跳转类，导致系统复杂度提高。在实际的项目中，需要适度的考虑这个原则，不能因为套用原则而反而使项目设计变得复杂。</p><h4 id="参考书籍与链接"><a href="#参考书籍与链接" class="headerlink" title="参考书籍与链接"></a>参考书籍与链接</h4><ul><li>《设计模式之禅》</li><li><a href="https://tianweili.github.io/2015/02/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/" target="_blank" rel="noopener">https://tianweili.github.io/2015/02/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/</a></li><li><a href="https://blog.csdn.net/zhengzhb/article/details/7296930" target="_blank" rel="noopener">https://blog.csdn.net/zhengzhb/article/details/7296930</a></li><li><a href="https://www.jianshu.com/p/30931aab5ea0" target="_blank" rel="noopener">https://www.jianshu.com/p/30931aab5ea0</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是迪米特法则-Law-of-Demeter-LoD&quot;&gt;&lt;a href=&quot;#什么是迪米特法则-Law-of-Demeter-LoD&quot; class=&quot;headerlink&quot; title=&quot;什么是迪米特法则(Law of Demeter, LoD)&quot;&gt;&lt;/a&gt;什么是
      
    
    </summary>
    
      <category term="面向对象六大原则" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="六大原则" scheme="http://yoursite.com/tags/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面向对象六大原则——接口隔离原则</title>
    <link href="http://yoursite.com/2018/04/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2018/04/27/面向对象六大原则——接口隔离原则/</id>
    <published>2018-04-27T08:29:36.000Z</published>
    <updated>2018-04-28T09:45:31.519Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是接口隔离原则-Interface-Segregation-Principle-ISP"><a href="#什么是接口隔离原则-Interface-Segregation-Principle-ISP" class="headerlink" title="什么是接口隔离原则(Interface  Segregation Principle, ISP)"></a>什么是接口隔离原则(Interface  Segregation Principle, ISP)</h4><p>&emsp;接口对于Java开发者来说都不陌生，它几乎存在于每一个Java程序中，是抽象的代名词。在讲接口隔离原则之前，先说说接口，接口分为以下两种：</p><ul><li><strong>实例接口(Object Interface)：</strong> 在Java中声明一个类，然后用new关键字产生一个实例，是对一个类型的事物的描述，这就是一种接口。或许我们乍一看会有点懵，怎么和我们原来学习的接口不一样呢，其实我们这样想，我们都知道，在Java中有一个Class类，表示正在运行的类和接口，换句话说每一个正在运行时的类或接口都是Class类的对象，这是一种向上的抽象。接口是一种更为抽象的定义，类是一类相同事物的描述集合，那为什么不可以抽象为一个接口呢？</li><li><strong>类接口(Class Interface)：</strong> 这就是我们经常使用的用interface定义的接口</li></ul><p>&emsp;这里插一句，接口隔离原则中所说的接口并不是狭意的在Java中用interface定义的接口，而是一种更为宽泛的概念，可以是接口，抽象类或者实体类。</p><p>&emsp;<strong>接口隔离原则定义如下：</strong></p><ul><li>客户端不应该依赖它不需要的接口</li><li>类间的依赖关系应该建立在最小的接口上</li></ul><blockquote><p>&emsp;其实通俗来理解就是，不要在一个接口里面放很多的方法，这样会显得这个类很臃肿不堪。接口应该尽量细化，一个接口对应一个功能模块，同时接口里面的方法应该尽可能的少，使接口更加轻便灵活。或许看到接口隔离原则这样的定义很多人会觉得和单一职责原则很像，但是这两个原则还是有着很鲜明的区别。接口隔离原则和单一职责原则的审视角度是不同的，单一职责原则要求类和接口职责单一，注重的是职责，是业务逻辑上的划分，而接口隔离原则要求方法要尽可能的少，是在接口设计上的考虑。例如一个接口的职责包含10个方法，这10个方法都放在一个接口中，并且提供给多个模块访问，各个模块按照规定的权限来访问，并规定了“不使用的方法不能访问”，这样的设计是不符合接口隔离原则的，接口隔离原则要求“尽量使用多个专门的接口”，这里专门的接口就是指提供给每个模块的都应该是单一接口(即每一个模块对应一个接口)，而不是建立一个庞大臃肿的接口来容纳所有的客户端访问。</p></blockquote><h4 id="接口隔离原则的使用"><a href="#接口隔离原则的使用" class="headerlink" title="接口隔离原则的使用"></a>接口隔离原则的使用</h4><p>&emsp;在说接口隔离原则之前，我们先说一个没有使用该原则的例子，然后通过前后对比，来看看有什么不同之处。大家一听到“美女”这个字眼，会想到什么呢？别激动啊，我没啥意思，只是想给美女来定一个通用的标准：面貌，身材与气质，一般来说，长得好看的，身材不错的，气质出众的都可以称为美女。假如我现在是一个星探，下面我要设计一个找美女的类图：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/ISP-1.JPG" alt=""></p><p>&emsp;定义了一个IPettyGirl接口，声明所有的美女都应该有goodLooking，niceFigure，greatTemperament。还定义了一个抽象类AbstractSearcher，其作用就是搜索美女并显示其信息。下面是接口的定义与实现：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//美女接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPettyGirl</span> &#123;</span><br><span class="line">    <span class="comment">//要有姣好的面孔</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goodLooking</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//要有好身材</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">niceFigure</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//要有气质</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greatTemperament</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PettyGirl</span> <span class="title">implements</span> <span class="title">IPettyGirl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PettyGirl</span>(<span class="params">String  name</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name= name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//脸蛋漂亮</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goodLooking</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.name + <span class="string">"---脸蛋很漂亮!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//气质要好</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greatTemperament</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.name + <span class="string">"---气质非常好!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//身材要好</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">niceFigure</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.name + <span class="string">"---身材非常棒!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>美女有了，就需要星探出马找美女了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//星探的抽象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSearcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> IPettyGirl pettyGirl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractSearcher</span><span class="params">(IPettyGirl pettyGirl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pettyGirl = pettyGirl;</span><br><span class="line">   &#125;</span><br><span class="line">     <span class="comment">//搜索美女， 列出美女信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Searcher</span> <span class="keyword">extends</span> <span class="title">AbstractSearcher</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Searcher</span><span class="params">(IPettyGirl pettyGirl)</span></span>&#123;</span><br><span class="line">         <span class="keyword">super</span>(pettyGirl);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示美女的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------美女的信息如下： ---------------"</span>);</span><br><span class="line">         <span class="comment">//展示面容</span></span><br><span class="line">        <span class="keyword">super</span>.pettyGirl.goodLooking();</span><br><span class="line">         <span class="comment">//展示身材</span></span><br><span class="line">        <span class="keyword">super</span>.pettyGirl.niceFigure();</span><br><span class="line">        <span class="comment">//展示气质</span></span><br><span class="line">        <span class="keyword">super</span>.pettyGirl.greatTemperament();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">      <span class="comment">//搜索并展示美女信息</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//定义一个美女</span></span><br><span class="line">      IPettyGirl xiaoMei = <span class="keyword">new</span> PettyGirl(<span class="string">"小美"</span>);</span><br><span class="line">      AbstractSearcher searcher = <span class="keyword">new</span> Searcher(yanYan);</span><br><span class="line">      searcher.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;OK，找美女的过程开发完毕，总体来说还是不错的，因为只要按照我们设计的原则来，那么找到的都是美女。但是这样的设计是最优的吗？现在考虑这样一种情况，由于人们审美的提高，或许颜值不一定是我们关注的主要因素，也许某个女生虽然颜值不是太高，但是气质很好，也可以把她称为美女。也有可能某些人喜欢身材匀称的，有的人觉得骨感一点好。也就是是说，美女的定义是可以宽泛话的，并非一成不变的。就如同我们的设计，必须符合我们定好的原则那才是美女，显然这是说不通的。所以上面的设计是有问题的，显然IPrettyGirl这个接口过于庞大了，根据接口隔离原则，星探AbstractSearcher应该依赖于具有部分特质的女孩子，但上面的设计却把这些特质都封装起来，放到一个接口中，这样就造成了封装过度，不容易扩展。</p><hr><p> &emsp;现在我们找到了问题的原因，那就该接口隔离原则上场了。把原IPrettyGirl接口拆分为两个接口，一种是外形美女IGoodBodyGirl(相貌一流，身材不错，但气质可能差点)，另一种是气质美女IGreatTemperamentGirl(也许外形条件不出众，但是谈吐优雅得体，气质很好)。下面是设计类图：<br> <img src="https://raw.githubusercontent.com/yuanghs/pictures/master/ISP-2.JPG" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGoodBodyGirl</span> </span>&#123;</span><br><span class="line">     <span class="comment">//要有姣好的面孔</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goodLooking</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="comment">//要有好身材</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">niceFigure</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGreatTemperamentGirl</span> </span>&#123;</span><br><span class="line">    <span class="comment">//要有气质</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greatTemperament</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PettyGirl</span> <span class="keyword">implements</span> <span class="title">IGoodBodyGirl</span>,<span class="title">IGreatTemperamentGirl</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">PettyGirl</span><span class="params">(String _name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=_name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//脸蛋漂亮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goodLooking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"---脸蛋很漂亮!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//气质要好</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greatTemperament</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="keyword">this</span>.name + <span class="string">"---气质非常好!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//身材要好</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">niceFigure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"---身材非常棒!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，现在经过重新设计，程序变得更加灵活，这就是接口隔离原则的强大之处。</p><h4 id="ISP的几个使用原则"><a href="#ISP的几个使用原则" class="headerlink" title="ISP的几个使用原则"></a>ISP的几个使用原则</h4><ul><li><strong>根据接口隔离原则拆分接口时，首先必须满足单一职责原则：</strong> 没有哪个设计可以十全十美的考虑到所有的设计原则，有些设计原则之间就可能出现冲突，就如同单一职责原则和接口隔离原则，一个考虑的是接口的职责的单一性，一个考虑的是方法设计的专业性(尽可能的少)，必然是会出现冲突。在出现冲突时，尽量以单一职责为主，当然这也要考虑具体的情况。</li><li><strong>提高高内聚：</strong> 提高接口，类，模块的处理能力，减少对外的交互。比如你给杀手提交了一个订单，要求他在一周之内杀一个人，一周后杀手完成了任务，这种不讲条件完成任务的表现就是高内聚。具体来说就是：要求在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险就越小，也有利于降低成本。</li><li><strong>定制服务：</strong> 单独为一个个体提供优良服务(只提供访问者需要的方法)。</li><li><strong>接口设计要有限度：</strong> 根据经验判断</li></ul><h4 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h4><ul><li>《设计模式之禅》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是接口隔离原则-Interface-Segregation-Principle-ISP&quot;&gt;&lt;a href=&quot;#什么是接口隔离原则-Interface-Segregation-Principle-ISP&quot; class=&quot;headerlink&quot; title=&quot;什么
      
    
    </summary>
    
      <category term="面向对象六大原则" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="六大原则" scheme="http://yoursite.com/tags/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="接口" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>面向对象六大原则——依赖倒置原则</title>
    <link href="http://yoursite.com/2018/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2018/04/26/面向对象六大原则——依赖倒置原则/</id>
    <published>2018-04-26T13:24:56.000Z</published>
    <updated>2018-04-27T08:17:42.371Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是依赖倒置原则-Dependence-Inversion-Principle-DIP"><a href="#什么是依赖倒置原则-Dependence-Inversion-Principle-DIP" class="headerlink" title="什么是依赖倒置原则(Dependence Inversion Principle, DIP)"></a>什么是依赖倒置原则(Dependence Inversion Principle, DIP)</h4><p>&emsp;依赖倒置原则的包含如下的三层含义：</p><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象</li><li>抽象不应该依赖细节</li><li>细节应该依赖抽象</li></ul><p>&emsp;每一个逻辑的实现都是由原子逻辑组成的，不可分割的原子逻辑就是低层模块(一般是接口，抽象类)，原子逻辑的组装就是高层模块。在Java语言中，抽象就是指接口和或抽象类，两者都不能被直接实例化。细节就是实现类，实现接口或继承抽象类而产生的类就是细节，可以被直接实例化。下面是依赖倒置原则在Java语言中的表现：</p><ul><li>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的</li><li>接口或抽象类不依赖于实现类</li><li>实现类依赖于接口或抽象类</li></ul><p><strong>更为精简的定义：面向接口编程(Object-Oriented Design, OOD)</strong></p><p><strong>DIP的好处：</strong> 采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性。</p><h4 id="DIP的使用"><a href="#DIP的使用" class="headerlink" title="DIP的使用"></a>DIP的使用</h4><p>&emsp;现在我们先不考虑依赖倒置原则，看一下如下的设计：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/DIP-1.JPG" alt=""></p><blockquote><p>从上面的类图中可以看出，司机类和奔驰车类都属于细节，并没有实现或继承抽象，它们是对象级别的耦合。通过类图可以看出司机有一个drive()方法，用来开车，奔驰车有一个run()方法，用来表示车辆运行，并且奔驰车类依赖于司机类，用户模块表示高层模块，负责调用司机类和奔驰车类。</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Driver</span> &#123;</span><br><span class="line">  <span class="comment">//司机的主要职责就是驾驶汽车</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span>(<span class="params">Benz benz</span>)</span>&#123;</span><br><span class="line">      benz.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Benz</span> &#123;</span><br><span class="line">    <span class="comment">//汽车肯定会跑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"奔驰汽车开始运行..."</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高层模块</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">     Driver xiaoLi = <span class="keyword">new</span> Driver();</span><br><span class="line">     Benz benz = <span class="keyword">new</span> Benz();</span><br><span class="line">    <span class="comment">//小李开奔驰车</span></span><br><span class="line">    xiaoLi.drive(benz);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;这样的设计乍一看好像也没有问题，小李只管开着他的奔驰车就好。但是假如有一天他不想开奔驰了，想换一辆宝马车玩玩怎么办呢？我们当然可以新建一个宝马车类，也给它弄一个run()方法，但问题是，这辆车有是有了，但是小李却不能开啊。因为司机类里面并没有宝马车的依赖，所以小李空看着宝马车在那儿躺着，自己却没有钥匙，你说郁不郁闷呢？</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BMW</span> &#123;</span><br><span class="line">    <span class="comment">//宝马车当然也可以开动了</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"宝马汽车开始运行..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;上面的设计没有使用依赖倒置原则，我们已经郁闷的发现，模块与模块之间耦合度太高，生产力太低，只要需求一变就需要大面积重构，说明这样的设计是不合理。现在我们引入依赖倒置原则，重新设计的类图如下：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/DIP-2.JPG" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将司机模块抽象为一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDriver</span> </span>&#123;</span><br><span class="line">     <span class="comment">//是司机就应该会驾驶汽车</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(ICar car)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">implements</span> <span class="title">IDriver</span></span>&#123;</span><br><span class="line">    <span class="comment">//司机的主要职责就是驾驶汽车</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(ICar car)</span></span>&#123;</span><br><span class="line">        car.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将汽车模块抽象为一个接口：可以是奔驰汽车，也可以是宝马汽车</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">      <span class="comment">//是汽车就应该能跑</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">ICar</span></span>&#123;</span><br><span class="line">    <span class="comment">//汽车肯定会跑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奔驰汽车开始运行..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">implements</span> <span class="title">ICar</span></span>&#123;</span><br><span class="line">   <span class="comment">//宝马车当然也可以开动了</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"宝马汽车开始运行..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高层模块</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       IDriver xiaoLi = <span class="keyword">new</span> Driver();</span><br><span class="line">       ICar benz = <span class="keyword">new</span> Benz();</span><br><span class="line">      <span class="comment">//小李开奔驰车</span></span><br><span class="line">      xiaoLi.drive(benz);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;在新增低层模块时，只修改了高层模块(业务场景类)，对其他低层模块(Driver类)不需要做任何修改，可以把”变更”的风险降低到最低。在Java中，只要定义变量就必然有类型，并且可以有两种类型：表面类型和实际类型，表面类型是在定义时赋予的类型，实际类型是对象的类型。就如上面的例子中，小李的表面类型是IDriver，实际类型是Driver。</p><p>&emsp;抽象是对实现的约束，是对依赖者的一种契约，不仅仅约束自己，还同时约束自己与外部的关系，其目的就是保证所有的细节不脱离契约的范畴，确保约束双方按照规定好的契约(抽象)共同发展，只要抽象这条线还在，细节就脱离不了这个圈圈。就好比一场篮球比赛，已经定好了规则，大家如果按照规则来打球，那么会很愉快。但是假如大家脱离了规则，那么也许比赛就无法顺利进行。</p><h4 id="DIP的几种写法"><a href="#DIP的几种写法" class="headerlink" title="DIP的几种写法"></a>DIP的几种写法</h4><ul><li><p><strong>接口声明依赖对象：</strong> 在接口的方法中声明依赖对象，就如上面的例子。</p></li><li><p><strong>构造函数传递依赖对象：</strong> 在类中通过构造函数声明依赖对象(好比Spring中的构造器注入)，采用构造器注入。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将司机模块抽象为一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDriver</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">implements</span> <span class="title">IDriver</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ICar car;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Driver</span><span class="params">(ICar car)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(ICar car)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Setter方法传递依赖对象：</strong> 在抽象中设置Setter方法声明依赖对象(Spring中的方法注入)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDriver</span></span>&#123;</span><br><span class="line">  <span class="comment">//注入依赖</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(ICar car)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">implements</span> <span class="title">IDriver</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ICar car;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(ICar car)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.car = car;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.car.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h4><p>&emsp;依赖倒置原则的本质就是通过抽象(抽象类或接口)使各个类或模块实现彼此独立，不互相影响，实现模块间的松耦合。在项目中使用这个规则需要以下原则;</p><ul><li><strong>每个类尽量都要有接口或抽象类，或者抽象类和接口都有：</strong> 依赖倒置原则的基本要求，有抽象才能依赖倒置</li><li><strong>变量的表面类型尽量是接口或者抽象类</strong></li><li><strong>任何类都不应该从具体类派生</strong></li><li><strong>尽量不要重写基类已经写好的方法(里式替换原则)</strong></li><li><strong>结合里式替换原则来使用：</strong> 结合里式替换原则和依赖倒置原则我们可以得出一个通俗的规则，接口负责定义public属性和方法，并且声明与其他对象的依赖关系，抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑，同时在适当的时候对父类进行细化。</li></ul><p><strong>一句话：依赖倒置原则的核心就是面向抽象(抽象类或者接口)编程</strong></p><h4 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h4><ul><li>《设计模式之禅》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是依赖倒置原则-Dependence-Inversion-Principle-DIP&quot;&gt;&lt;a href=&quot;#什么是依赖倒置原则-Dependence-Inversion-Principle-DIP&quot; class=&quot;headerlink&quot; title=&quot;什么是依
      
    
    </summary>
    
      <category term="面向对象六大原则" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="六大原则" scheme="http://yoursite.com/tags/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面向对象六大原则——单一职责原则</title>
    <link href="http://yoursite.com/2018/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2018/04/26/面向对象六大原则——单一职责原则/</id>
    <published>2018-04-26T06:19:44.000Z</published>
    <updated>2018-04-26T06:23:04.751Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是单一职责原则-Single-Responsibility-Principle-SRP"><a href="#什么是单一职责原则-Single-Responsibility-Principle-SRP" class="headerlink" title="什么是单一职责原则(Single Responsibility Principle, SRP)"></a>什么是单一职责原则(Single Responsibility Principle, SRP)</h4><p>&emsp;在讲解什么是单一职责原则之前，我们先说一个例子，吊一下口味：我们在做项目的时候，会接触到用户，机构，角色管理这些模块，基本上使用的都是RBAC模型(Role-Based Access Control，基于角色的访问控制， 通过分配和取消角色来完成用户权限的授予和取消，使动作主体(用户)与资源的行为(权限)分离)。现在假设这样一种场景，我们把用户管理，修改用户信息，增加机构，增加角色等维护信息写到一个接口中进行管理，类图如下：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/SRP-1.JPG" alt=""></p><p>分析上面的类图我们会发现，这样的设计是非常不合理的，用户的属性和用户的行为是两种不同的业务模式，把它们都写在一个类中显然不行。我们应该把用户的信息抽取成一个BO(Business Object, 业务对象)， 把行为抽取成一个Biz(Business Logic, 业务逻辑)， 重新设计的类图如下：</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/SRP-2.JPG" alt=""></p><h4 id="SRP在类或接口中的使用"><a href="#SRP在类或接口中的使用" class="headerlink" title="SRP在类或接口中的使用"></a>SRP在类或接口中的使用</h4><p>&emsp;SRP的原话是：There should never be more than one reason for a class to change.翻译过来其实也很好懂：应该有且仅有一个原因引起类的变更。看下面的例子：</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/SRP-3.JPG" alt=""></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">上面的的类图对应的接口入下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPhone</span>&#123;</span><br><span class="line">  <span class="comment">//拨通电话</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dial</span>(<span class="params">String phoneNumber</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通话</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chat</span>(<span class="params">Object o</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//挂断电话</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hangup</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在看到这个接口的时候，我们都会认为这样的设计是没有问题的，拨通电话，通话，挂断电话写在同一个接口里面并没有什么错。但是，我们仔细分析，这个接口真的没有问题吗？<strong>单一职责原则要求一个接口或类只有一个原因引起变化，也就是说一个接口或一个类只有一个原则，它就只负责一件事。</strong> 但我们分析上面这个接口，却发现它包含了两个职责：一个时协议管理，一个是数据传送。dial()和hangup()两个方法实现的是协议管理，分别是拨通电话和挂机。chat()实现的是数据传送，把我们说的话转换成模拟信号或数字信号传递给对方，然后再把对方传递过来的信号还原成我们听得懂的语言。这里的协议接通和数据传送的变化都会引起该接口或实现类的变化。我们想一想，这两个职责会相互影响吗？不管是什么协议，协议接通只负责将电话接通就行，而数据传输只需要传输数据，不必要去管协议是如何接通的。所以通过分析，IPhone接口包含了两个职责，而且这两个职责的变化不互相影响，这就可以考虑分成两个接口，类图如下：</p></blockquote><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/SRP-4.JPG" alt=""></p><blockquote><p>观察上面的类图，我们发现这样的设计会比原来笼统的设计优雅的多，现在的设计在职责上比原来更加分明，让人一眼就能看出这个接口负责的是什么。也许有人会问，Phone这个类实现了两个接口，又把两个职责融合在了一个类中，那么是不是就有两个原因引起了它的变化了呢？别忘了，我们是面向接口编程，我们对外公布的是接口(API)，并非实现类，给你提供了模板，在接口层面已经为你明确了职责，那么具体的实现怎么弄就需要开发者去考虑了。</p></blockquote><h4 id="SRP也适用于方法"><a href="#SRP也适用于方法" class="headerlink" title="SRP也适用于方法"></a>SRP也适用于方法</h4><p>&emsp;其实，单一职责原则不仅适用于类，接口，同样适用于方法中。这要举一个例子了，比如我们做项目的时候会遇到修改用户信息这样的功能模块，我们一般的想法是将用户的所有数据都接收过来，比如用户名，信息，密码，家庭地址等等，然后统一封装到一个User对象中提交到数据库，我们一般都是这么干的，就如下面这样：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/SRP-5.JPG" alt=""></p><p>&emsp;其实这样的方法是不可取的，因为职责不明确，方法不明确，你到底是要修改密码，还是修改用户名，还是修改地址，还是都要修改？这样职责不明确的话在与其他项目成员沟通的时候会产生很多麻烦，正确的设计如下：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/SRP-6.JPG" alt=""></p><h4 id="SRP的优点"><a href="#SRP的优点" class="headerlink" title="SRP的优点"></a>SRP的优点</h4><ul><li>类的复杂性降低，对于实现什么职责都有清晰明确的定义。</li><li>可读性提高。</li><li>可维护性提高。</li><li>变更引起的风险降低，一个接口的修改只对相应的实现类有影响，对其他接口无影响，这对系统的扩展性，维护性都有非常大的帮助。</li></ul><h4 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h4><ul><li>《设计模式之禅》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是单一职责原则-Single-Responsibility-Principle-SRP&quot;&gt;&lt;a href=&quot;#什么是单一职责原则-Single-Responsibility-Principle-SRP&quot; class=&quot;headerlink&quot; title=&quot;什么
      
    
    </summary>
    
      <category term="面向对象六大原则" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="六大原则" scheme="http://yoursite.com/tags/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面向对象六大原则——里式替换原则</title>
    <link href="http://yoursite.com/2018/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E5%BC%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2018/04/26/面向对象六大原则——里式替换原则/</id>
    <published>2018-04-26T06:18:56.000Z</published>
    <updated>2018-04-26T10:21:16.570Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说说继承"><a href="#说说继承" class="headerlink" title="说说继承"></a>说说继承</h4><p>&emsp;继承是面向对象三大特性之一，是一种非常优秀的语言机制，它有如下有点：</p><ul><li>代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性</li><li>提高代码的重用性</li><li>子类可以形似父类</li><li>提高代码的可扩展性</li><li>提高产品或项目的开放性</li></ul><p>&emsp;继承有它的优点，但是也有一些致命的缺点：</p><ul><li>继承具有侵入性，只要子类继承了父类，那么子类必须拥有父类的所有属性和方法</li><li>降低了代码的灵活性</li><li>增强了耦合性。当父类中发生方法，属性的修改时需要考虑子类是否修改，而且在缺乏规范的情况下，还可能发生大段的代码重构</li></ul><p>&emsp;正如前面所说，继承是面向对象非常优良的特性，使用继承有利也有弊，如何将继承的利最大化，弊最小化呢(这就是为什么说在开发时多用组合，少用继承)，解决方案就是引入里式替换原则。</p><p><strong>举例说说继承的缺点</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要完成一个两数相减的功能，由类A来负责</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> a-b;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;  </span><br><span class="line">        A a = <span class="keyword">new</span> A();  </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"100-50="</span>+a.func1(<span class="number">100</span>, <span class="number">50</span>));  </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"100-80="</span>+a.func1(<span class="number">100</span>, <span class="number">80</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">100</span><span class="number">-50</span>=<span class="number">50</span></span><br><span class="line"><span class="number">100</span><span class="number">-80</span>=<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在增加一个功能：完成两数相加，然后再与100求和，由类B来负责</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> a+b;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> func1(a,b)+<span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;  </span><br><span class="line">        B b = <span class="keyword">new</span> B();  </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"100-50="</span>+b.func1(<span class="number">100</span>, <span class="number">50</span>));  </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"100-80="</span>+b.func1(<span class="number">100</span>, <span class="number">80</span>));  </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"100+20+100="</span>+b.func2(<span class="number">100</span>, <span class="number">20</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">结果：</span><br><span class="line"><span class="number">100</span><span class="number">-50</span>=<span class="number">150</span></span><br><span class="line"><span class="number">100</span><span class="number">-80</span>=<span class="number">180</span></span><br><span class="line"><span class="number">100</span>+<span class="number">20</span>+<span class="number">100</span>=<span class="number">220</span></span><br></pre></td></tr></table></figure><p> &emsp;我们发现原本运行正常的相减功能发生了错误。原因就是类B在给方法起名时无意中重写了父类的方法，造成所有运行相减功能的代码全部调用了类B重写后的方法，造成原本运行正常的功能出现了错误。在本例中，引用基类A完成的功能，换成子类B之后，发生了异常。在实际编程中，我们常常会通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的几率非常大。(违反了里式替换原则)</p><h4 id="什么是里式替换原则-LiskovSubstitution-Principle，-LSP"><a href="#什么是里式替换原则-LiskovSubstitution-Principle，-LSP" class="headerlink" title="什么是里式替换原则(LiskovSubstitution Principle， LSP)"></a>什么是里式替换原则(LiskovSubstitution Principle， LSP)</h4><ul><li><p>第一种定义：如果对每一个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替换成o2时，程序P的行为没有变化，那么类型T2是类型T1的子类型。</p></li><li><p>第二种定义：子类型必须能替换掉它们的基类型</p></li></ul><p><strong>理解：</strong> 第二种定义相对来说更易于理解一些，通俗来说就是：只要父类出现的地方子类就可以出现，而且提换为子类也不会出现任何的错误和异常。但是反过来是不行的，有子类出现的地方，父类未必能替换。</p><h4 id="LSP的深层含义"><a href="#LSP的深层含义" class="headerlink" title="LSP的深层含义"></a>LSP的深层含义</h4><p>&emsp;里式替换原则为良好的继承定义了一个规范，它包含四个深层含义：</p><ul><li><strong>子类必须完全实现父类的方法, 但不能覆盖(重写)父类的非抽象方法</strong>：这个规则相对来说是很好理解的，我们定义了一个接口或抽象类，我们必须在子类中完全实现所有的抽象方法，其实这时我们已经使用了里式替换原则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> calss test&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> B();</span><br><span class="line">    a.run();</span><br><span class="line">    a.fly();</span><br><span class="line">    a.walk();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>子类可以增加自己特有的方法</strong></p></li><li><p><strong>当子类的方法重载父类的方法时，子类方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松</strong></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(HashMap <span class="built_in">map</span>)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类被执行..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>.values();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="title">extends</span> <span class="title">Father</span> &#123;</span></span><br><span class="line">    <span class="comment">// 放大输入参数类型</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(Map <span class="built_in">map</span>)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类被执行..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>.values();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invoker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 父类存在的地方，子类就应该能够存在</span></span><br><span class="line">        <span class="comment">// Father f = new Father();</span></span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        HashMap <span class="built_in">map</span> = <span class="keyword">new</span> HashMap();</span><br><span class="line">        son.doSomething(<span class="built_in">map</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        invoker();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">两个输出结果都是：父类被执行...</span><br><span class="line"></span><br><span class="line"><span class="comment">//假如将父类和子类的参数类型调换</span></span><br><span class="line">则 f.doSomething(<span class="built_in">map</span>) 输出结果为：父类被执行</span><br><span class="line">   son.doSomething(<span class="built_in">map</span>) 输出结果为：子类被执行</span><br></pre></td></tr></table></figure><blockquote><p>&emsp;解释如下：在上面的例子中，子类中的doSomething(Map map)和父类中的doSomething(HashMap map)两个方法构成重载(并不是重写，因为参数列表不同，子类继承父类那么相应的父类方法就存在于子类的生命周期中，所以构成重载)，而子类方法的形参范围比父类方法的形参范围要大。其实我们可以想一想，子类方法的形参范围比父类方法的形参范围要大，则子类代替父类传递参数到调用者中，子类的方法将永远不会被执行，这其实和里式交换原则是想符合的，父类的空间必须是子类的子区间，那么子类才能替换父类。而假如父类方法的形参范围大于子类方法的形参范围，子类方法在没有重写父类方法的前提下被执行了，这会引起业务逻辑的混乱，因为在实际应用中父类一般是抽象类，子类是实现类，你传递了一个这样的实现类就会“歪曲”父类的意图，引起一堆意想不到的逻辑混乱，所以子类中方法的前置条件必须与超类中被覆写的方法的前置条相同或更宽松。</p></blockquote><ul><li><strong>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更加严格</strong>： 如父类要求返回List，那么子类就应该返回List的实现ArrayList，父类是采用泛型，那么子类则不能采用泛型，而是具体的返回。</li></ul><h4 id="加深理解"><a href="#加深理解" class="headerlink" title="加深理解"></a>加深理解</h4><ul><li><strong>其实通俗说来，里式替换原则就是：子类可以扩展父类的功能，但不能改变父类原有的功能</strong></li><li><strong>当继承不能满足里式替换原则时应该进行重构</strong>：<ul><li>把冲突的派生类与基类的公共部分提取出来作为一个抽象基类，然后分别继承这个类。</li><li>改变继承关系：从父子关系变为委托关系</li></ul></li><li><strong>在类中调用其他类时务必要使用父类或接口， 如果不能使用父类或接口， 则说明类的设计已经违背了LSP原则</strong></li><li><strong>如果子类不能完整地实现父类的方法， 或者父类的某些方法在子类中已经发生“畸变”， 则建议断开父子继承关系， 采用依赖、 聚集、 组合等关系代替继承</strong></li></ul><h4 id="多态与LSP是否矛盾"><a href="#多态与LSP是否矛盾" class="headerlink" title="多态与LSP是否矛盾"></a>多态与LSP是否矛盾</h4><p>&emsp;在学习Java里面的多态时，我们知道多态的前提就是要有子类继承父类并且子类重写父类的方法。那这是否和LSP矛盾呢？因为LSP要求我们只可以扩展父类的功能，但不能改变父类原有的功能，也就是不能对父类原有的方法进行重写，只能去实现父类的方法或重载。下面是我在知乎上找到的一种比较合理的解释：</p><ul><li>里式替换原则是针对继承而言的，如果继承是为了实现代码的重用，也 就是为了共享方法，那么共享的父类方法就应该保持不变，不能被子类重新定义。子类只能通过添加新的方法来扩展功能，父类和子类都可以实例化，而子类继承的方法和父类是一样的，父类调用方法的地方，子类也可以调用同一个继承得来的，逻辑和父类一致的方法，这时就可以使用子类对象将父类对象替换掉。</li><li>如果继承的目的是为了多态，而多态的前提就是子类重写父类的方法，为了符合LSP，我们应该将父类重新定义为抽象类，并定义抽象方法，让子类重新定义这些方法。由于父类是抽象类，所以父类不能被实例化，也就不存在可实例化的父类对象在程序里，就不存在子类替换父类时逻辑不一致的可能。</li></ul><p><strong>不符合LSP最常见的情况就是：父类和子类都是非抽象类，且父类的方法被子类重新定义，这样实现继承会造成子类和父类之间的强耦合，将不相关的属性和方法搅和在一起，不利于程序的维护和扩展。所以总结一句：尽量不要从可实例化的父类中继承，而是要使用基于抽象类和接口的继承(也就是面向接口和抽象编程)</strong></p><h4 id="参考书籍与网站"><a href="#参考书籍与网站" class="headerlink" title="参考书籍与网站"></a>参考书籍与网站</h4><ul><li>《设计模式之禅》</li><li><a href="https://blog.csdn.net/zhengzhb/article/details/7281833" target="_blank" rel="noopener">https://blog.csdn.net/zhengzhb/article/details/7281833</a></li><li><a href="https://blog.csdn.net/tjiyu/article/details/76551307" target="_blank" rel="noopener">https://blog.csdn.net/tjiyu/article/details/76551307</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;说说继承&quot;&gt;&lt;a href=&quot;#说说继承&quot; class=&quot;headerlink&quot; title=&quot;说说继承&quot;&gt;&lt;/a&gt;说说继承&lt;/h4&gt;&lt;p&gt;&amp;emsp;继承是面向对象三大特性之一，是一种非常优秀的语言机制，它有如下有点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码共享，减少创
      
    
    </summary>
    
      <category term="面向对象六大原则" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="六大原则" scheme="http://yoursite.com/tags/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式——Adapter</title>
    <link href="http://yoursite.com/2018/04/24/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94Adapter/"/>
    <id>http://yoursite.com/2018/04/24/适配器模式——Adapter/</id>
    <published>2018-04-24T06:00:02.000Z</published>
    <updated>2018-04-27T08:26:02.786Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说说啥是适配器"><a href="#说说啥是适配器" class="headerlink" title="说说啥是适配器"></a>说说啥是适配器</h4><p>&emsp;适配器模式是设计模式中比较好理解的设计模式之一。适配器，通俗来说就有点像生活中插座的转接头，你有一个三孔插座，但是你的电视插头却是两孔的，这时加上一个转接头就能让插头正常工作。其实，适配器模式的思想也就源于此，在面向对象的代码中，有很多可复用的类(经过反复测试可用)，但是有时候我们去使用的时候却必须去改动一些地方，这就需要我们重新去测试，如此反复浪费时间与效率，于是大佬们就想出了一种设计模式——适配器模式，我们去做一个转接头，把那些可复用的类包装成目标对象不就可以了吗？于是，适配器模式应运而生。</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Adapter-1.JPG" alt=""></p><h4 id="适配器模式的定义"><a href="#适配器模式的定义" class="headerlink" title="适配器模式的定义"></a>适配器模式的定义</h4><p>&emsp;Convert the interface of a class into another interface clients expect.Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.（将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。）Adapter模式又被称为Wrapper模式(包装器)，它有以下两种：</p><ul><li><p><strong>类适配器模式(使用继承的适配器)</strong> 类图如下：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Adapter-5.JPG" alt=""></p></li><li><p><strong>对象适配器模式(使用委托的适配器)</strong> 类图如下：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Adapter-6.JPG" alt=""></p></li></ul><p><strong>对适配器中各个登场角色的分析</strong></p><ul><li><strong>Target对象</strong>：该对象定义把其他类转化为何种接口，也就是我们的期望接口。如下面案例中的IUserInfo接口就是目标对象</li><li><strong>Adaptee源角色</strong>：被适配的对象，它是已经存在的，运转良好的类或对象。如下面案例中的IOuterUser接口</li><li><strong>Adapter适配器角色</strong>：适配器模式的核心角色，通过类继承或类关联的方式将源角色转换为目标角色</li><li><strong>Client角色</strong>：该角色负责使用Target角色所定义的方法进行具体处理</li></ul><h4 id="案例引入-来自《设计模式之禅》-——类适配器模式"><a href="#案例引入-来自《设计模式之禅》-——类适配器模式" class="headerlink" title="案例引入(来自《设计模式之禅》)——类适配器模式"></a>案例引入(来自《设计模式之禅》)——类适配器模式</h4><p>&emsp;某公司做了一个人力资源管理项目，共分为三大模块：人员信息管理，薪酬管理，职位管理。其中，人员信息管理的对象是所有员工的所有信息(指在职的员工，离职退休的员工不考虑)，人员信息管理类图如下：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Adapter-2.JPG" alt=""></p><p><strong>接口设计如下：</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//人员信息管理模块接口(包含员工的基本信息)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUserInfo</span> &#123;</span><br><span class="line">    <span class="comment">//获得用户姓名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//获得家庭地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHomeAddress</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//手机号码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobileNumber</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//办公电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOfficeTelNumber</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//职位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJobPosition</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//获得家庭电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHomeTelNumber</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;上面代码是信息管理模块的接口设计，具体实现类没有给出。现在遇到了一个问题，公司需要从劳动服务公司引进一部分员工解决公司劳动力不足问题，就需要将他们的基本信息比如：人员信息，工资情况，福利情况等同步到本公司的人力资源管理系统中来(人力资源部门要求我们的系统同步劳动服务公司这部分员工的信息)，但是经过调研发现，劳动服务公司的人员对象和本公司系统的对象不相同，劳动服务公司人员信息管理类图如下：</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Adapter-3.JPG" alt=""></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口设计</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOuterUser</span> </span>&#123;</span><br><span class="line"><span class="comment">//基本信息， 比如名称、 性别、 手机号码等</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserBaseInfo();</span><br><span class="line"></span><br><span class="line"><span class="comment">//工作区域信息</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserOfficeInfo();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户的家庭信息</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserHomeInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterUser</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IOuterUser</span></span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 用户的基本信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserBaseInfo() &#123;</span><br><span class="line">    HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; baseInfoMap = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">    baseInfoMap.put(<span class="string">"userName"</span>, <span class="string">"这个员工叫混世魔王..."</span>);</span><br><span class="line">    baseInfoMap.put(<span class="string">"mobileNumber"</span>, <span class="string">"这个员工电话是..."</span>);</span><br><span class="line">    <span class="keyword">return</span> baseInfoMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/</span><br><span class="line">**</span><br><span class="line">员工的家庭信息</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">public</span> Map getUserHomeInfo() &#123;</span><br><span class="line">    HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; homeInfo = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">    homeInfo.put(<span class="string">"homeTelNumbner"</span>, <span class="string">"员工的家庭电话是..."</span>);</span><br><span class="line">    homeInfo.put(<span class="string">"homeAddress"</span>, <span class="string">"员工的家庭地址是..."</span>);</span><br><span class="line">    <span class="keyword">return</span> homeInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/</span><br><span class="line">**</span><br><span class="line">员工的工作信息， 比如， 职位等</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserOfficeInfo() &#123;</span><br><span class="line">   HashMap officeInfo = <span class="keyword">new</span> <span class="type">HashMap</span>();</span><br><span class="line">   officeInfo.put(<span class="string">"jobPosition"</span>,<span class="string">"这个人的职位是BOSS..."</span>);</span><br><span class="line">   officeInfo.put(<span class="string">"officeTelNumber"</span>, <span class="string">"员工的办公电话是..."</span>);</span><br><span class="line">   <span class="keyword">return</span> officeInfo;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;分析如上设计我们发现：劳动服务公司将人员信息分为了三部分：基本信息，办公信息和个人家庭信息，并且都放到HashMap中。现在的问题是，本公司的人员信息管理系统如何和劳服公司的系统进行交互呢？这时可以进行这样的转化，<strong>先拿到对方的数据对象，然后转化为我们自己的数据对象，中间加一层数据转换处理</strong>，类图如下：</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Adapter-4.JPG" alt=""></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适配器类OuterUserInfo的实现如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterUserInfo</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">OuterUser</span></span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IUserInfo</span></span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; baseInfo = <span class="keyword">super</span>.getUserBaseInfo();<span class="comment">//员工的基本信息</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; homeInfo = <span class="keyword">super</span>.getUserHomeInfo(); <span class="comment">//员工的家庭信息</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; officeInfo = <span class="keyword">super</span>.getUserOfficeInfo(); <span class="comment">//员工的工作信息</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">* 家庭地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">String</span> getHomeAddress() &#123;</span><br><span class="line">      <span class="keyword">String</span> homeAddress = <span class="built_in">this</span>.homeInfo.<span class="keyword">get</span>(<span class="string">"homeAddress"</span>);</span><br><span class="line">      System.out.println(homeAddress);</span><br><span class="line">      <span class="keyword">return</span> homeAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">*家庭电话号码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">String</span> getHomeTelNumber() &#123;</span><br><span class="line">      <span class="keyword">String</span> homeTelNumber = <span class="built_in">this</span>.homeInfo.<span class="keyword">get</span>(<span class="string">"homeTelNumber"</span>);</span><br><span class="line">      System.out.println(homeTelNumber);</span><br><span class="line">      <span class="keyword">return</span> homeTelNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">*职位信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">true<span class="keyword">public</span> <span class="keyword">String</span> getJobPosition() &#123;</span><br><span class="line">      <span class="keyword">String</span> jobPosition = <span class="built_in">this</span>.officeInfo.<span class="keyword">get</span>(<span class="string">"jobPosition"</span>);</span><br><span class="line">      System.out.println(jobPosition);</span><br><span class="line">      <span class="keyword">return</span> jobPosition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *手机号码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="keyword">public</span> <span class="keyword">String</span> getMobileNumber() &#123;</span><br><span class="line">     <span class="keyword">String</span> mobileNumber = <span class="built_in">this</span>.baseInfo.<span class="keyword">get</span>(<span class="string">"mobileNumber"</span>);</span><br><span class="line">     System.out.println(mobileNumber);</span><br><span class="line">     <span class="keyword">return</span> mobileNumber;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">*办公电话</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">true<span class="keyword">public</span> <span class="keyword">String</span> getOfficeTelNumber() &#123;</span><br><span class="line">       <span class="keyword">String</span> officeTelNumber = <span class="built_in">this</span>.officeInfo.<span class="keyword">get</span>(<span class="string">"officeTelNumbe"</span>);</span><br><span class="line">       System.out.println(officeTelNumber);</span><br><span class="line">       <span class="keyword">return</span> officeTelNumber;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *员工的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="keyword">public</span> <span class="keyword">String</span> getUserName() &#123;</span><br><span class="line">       <span class="keyword">String</span> userName = <span class="built_in">this</span>.baseInfo.<span class="keyword">get</span>(<span class="string">"userName"</span>);</span><br><span class="line">       System.out.println(userName);</span><br><span class="line">       <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主类如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.没有与外系统共享时</span></span><br><span class="line">    IUserInfo girl = <span class="keyword">new</span> <span class="type">UserInfo</span>();</span><br><span class="line"></span><br><span class="line">    girl.getMobileNumber();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.与外系统共享</span></span><br><span class="line">    IUserInfo girl2 = <span class="keyword">new</span> <span class="type">OuterUserInfo</span>();</span><br><span class="line"></span><br><span class="line">    girl2.getMobileNumber();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这就是适配器的强大之处，通过使用适配器，我们几乎不用对原来的系统和要包装的系统做任何修改，就能将两个系统很完美的拼接在一起，只要在主类修改一句话就能解决问题。</p></blockquote><h4 id="使用对象适配器模式"><a href="#使用对象适配器模式" class="headerlink" title="使用对象适配器模式"></a>使用对象适配器模式</h4><p>&emsp;我们还是使用上面的案例，我们想一想，假如劳动服务公司给的员工信息接口是分开的，比如基本信息一个接口，家庭信息一个接口等有多个接口的情况，我们还能像上面那样做吗？当然不行，因为Java是不支持多继承的，我们可以使用委托(也就是一种关联关系)来达到目的，这就是适配器模式的另一种方式：对象适配器模式。类图如下：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Adapter-7.JPG" alt=""></p><p><strong>各个接口和实现如下</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOuterUserBaseInfo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//基本信息， 比如名称、 性别、 手机号码等</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserBaseInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOuterUserHomeInfo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户的家庭信息</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserHomeInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOuterUserOfficeInfo</span> </span>&#123;</span><br><span class="line">   <span class="comment">//工作区域信息</span></span><br><span class="line">   <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserOfficeInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterUserBaseInfo</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IOuterUserBaseInfo</span></span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 用户的基本信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserBaseInfo() &#123;</span><br><span class="line">     HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; baseInfoMap = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">     baseInfoMap.put(<span class="string">"userName"</span>, <span class="string">"这个员工叫混世魔王..."</span>);</span><br><span class="line">     baseInfoMap.put(<span class="string">"mobileNumber"</span>, <span class="string">"这个员工电话是..."</span>);</span><br><span class="line">     <span class="keyword">return</span> baseInfoMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterUserHomeInfo</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IOuterUserHomeInfo</span></span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 员工的家庭信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserHomeInfo() &#123;</span><br><span class="line">    HashMap&lt;&gt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; homeInfo = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">    homeInfo.put(<span class="string">"homeTelNumbner"</span>, <span class="string">"员工的家庭电话是..."</span>);</span><br><span class="line">    homeInfo.put(<span class="string">"homeAddress"</span>, <span class="string">"员工的家庭地址是..."</span>);</span><br><span class="line">    <span class="keyword">return</span> homeInfo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterUserOfficeInfo</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IOuterUserOfficeInfo</span></span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 员工的工作信息， 比如， 职位等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getUserOfficeInfo() &#123;</span><br><span class="line">    HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; officeInfo = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">    officeInfo.put(<span class="string">"jobPosition"</span>,<span class="string">"这个人的职位是BOSS..."</span>);</span><br><span class="line">    officeInfo.put(<span class="string">"officeTelNumber"</span>, <span class="string">"员工的办公电话是..."</span>);</span><br><span class="line">    <span class="keyword">return</span> officeInfo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下面是适配器及主类</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterUserInfo</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IUserInfo</span></span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//源目标对象</span></span><br><span class="line">    <span class="keyword">private</span> IOuterUserBaseInfo baseInfo = <span class="literal">null</span>; <span class="comment">//员工的基本信息</span></span><br><span class="line">    <span class="keyword">private</span> IOuterUserHomeInfo homeInfo = <span class="literal">null</span>; <span class="comment">//员工的家庭信息</span></span><br><span class="line">    <span class="keyword">private</span> IOuterUserOfficeInfo officeInfo = <span class="literal">null</span>; <span class="comment">//工作信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据处理</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; baseMap = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; homeMap = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; officeMap = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数传递对象</span></span><br><span class="line">    <span class="keyword">public</span> OuterUserInfo(IOuterUserBaseInfo  baseInfo,IOuterUserHomeInfo homeInfo,</span><br><span class="line">      IOuterUserOfficeInfo officeInfo)&#123;</span><br><span class="line">          <span class="built_in">this</span>.baseInfo = baseInfo;</span><br><span class="line">          <span class="built_in">this</span>.homeInfo = homeInfo;</span><br><span class="line">          <span class="built_in">this</span>.officeInfo = officeInfo;</span><br><span class="line">          <span class="comment">//数据处理</span></span><br><span class="line">          <span class="built_in">this</span>.baseMap = <span class="built_in">this</span>.baseInfo.getUserBaseInfo();</span><br><span class="line">          <span class="built_in">this</span>.homeMap = <span class="built_in">this</span>.homeInfo.getUserHomeInfo();</span><br><span class="line">          <span class="built_in">this</span>.officeMap = <span class="built_in">this</span>.officeInfo.getUserOfficeInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//家庭地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getHomeAddress() &#123;</span><br><span class="line">          <span class="keyword">String</span> homeAddress = <span class="built_in">this</span>.homeMap.<span class="keyword">get</span>(<span class="string">"homeAddress"</span>);</span><br><span class="line">          System.out.println(homeAddress);</span><br><span class="line">          <span class="keyword">return</span> homeAddress;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//家庭电话号码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getHomeTelNumber() &#123;</span><br><span class="line">          <span class="keyword">String</span> homeTelNumber = <span class="built_in">this</span>.homeMap.<span class="keyword">get</span>(<span class="string">"homeTelNumber"</span>);</span><br><span class="line">          System.out.println(homeTelNumber);</span><br><span class="line">          <span class="keyword">return</span> homeTelNumber;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//职位信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getJobPosition() &#123;</span><br><span class="line">          <span class="keyword">String</span> jobPosition = <span class="built_in">this</span>.officeMap.<span class="keyword">get</span>(<span class="string">"jobPosition"</span>);</span><br><span class="line">          System.out.println(jobPosition);</span><br><span class="line">          <span class="keyword">return</span> jobPosition;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//手机号码</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">String</span> getMobileNumber() &#123;</span><br><span class="line">         <span class="keyword">String</span> mobileNumber = <span class="built_in">this</span>.baseMap.<span class="keyword">get</span>(<span class="string">"mobileNumber"</span>);</span><br><span class="line">         System.out.println(mobileNumber);</span><br><span class="line">         <span class="keyword">return</span> mobileNumber;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//办公电话</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getOfficeTelNumber() &#123;</span><br><span class="line">         <span class="keyword">String</span> officeTelNumber= <span class="built_in">this</span>.officeMap.<span class="keyword">get</span>(<span class="string">"officeTelNumber"</span></span><br><span class="line">         System.out.println(officeTelNumber);</span><br><span class="line">         <span class="keyword">return</span> officeTelNumber;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//员工的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getUserName() &#123;</span><br><span class="line">         <span class="keyword">String</span> userName = <span class="built_in">this</span>.baseMap.<span class="keyword">get</span>(<span class="string">"userName"</span>);</span><br><span class="line">         System.out.println(userName);</span><br><span class="line">         <span class="keyword">return</span> userName;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//主类如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">       <span class="comment">//外系统的人员信息</span></span><br><span class="line">       IOuterUserBaseInfo baseInfo = <span class="keyword">new</span> <span class="type">OuterUserBaseInfo</span>();</span><br><span class="line">       IOuterUserHomeInfo homeInfo = <span class="keyword">new</span> <span class="type">OuterUserHomeInfo</span>();</span><br><span class="line">       IOuterUserOfficeInfo officeInfo = <span class="keyword">new</span> <span class="type">OuterUserOfficeInfo</span>();</span><br><span class="line">       <span class="comment">//传递三个对象</span></span><br><span class="line">       IUserInfo girl = <span class="keyword">new</span> <span class="type">OuterUserInfo</span>(baseInfo,homeInfo,officeInfo)</span><br><span class="line"></span><br><span class="line">       girl.getMobileNumber();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适配器模式的优点"><a href="#适配器模式的优点" class="headerlink" title="适配器模式的优点"></a>适配器模式的优点</h4><ul><li>适配器模式可以让两个没有任何关系的类在一起运行</li><li>增加了类的透明性</li><li>提高了类的复用度：源角色在原有的系统中还可以正常使用，在目标角色中也可以充当新的演员</li><li>具有很高的灵活性</li></ul><p><strong>注意：</strong> 在使用适配器模式时，项目一定要遵循<a href="https://yuanghs.github.io/2018/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="noopener">依赖倒置原则</a>和<a href="https://yuanghs.github.io/2018/04/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E5%BC%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="noopener">里式替换原则</a>。</p><h4 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h4><ul><li>《设计模式之禅》</li><li>《图解设计模式》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;说说啥是适配器&quot;&gt;&lt;a href=&quot;#说说啥是适配器&quot; class=&quot;headerlink&quot; title=&quot;说说啥是适配器&quot;&gt;&lt;/a&gt;说说啥是适配器&lt;/h4&gt;&lt;p&gt;&amp;emsp;适配器模式是设计模式中比较好理解的设计模式之一。适配器，通俗来说就有点像生活中插座的转接
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HelloBird——资源回收o2o平台</title>
    <link href="http://yoursite.com/2018/04/21/HelloBird%E2%80%94%E2%80%94%E8%B5%84%E6%BA%90%E5%9B%9E%E6%94%B6o2o%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2018/04/21/HelloBird——资源回收o2o平台/</id>
    <published>2018-04-21T08:54:05.000Z</published>
    <updated>2018-04-22T05:33:37.164Z</updated>
    
    <content type="html"><![CDATA[<h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>&emsp;”HelloBird”是一个基于微信小程序搭建的资源回收o2o平台，目的是为了实现废旧资源的流转。在”HelloBird”中，用户可以轻松的获取生活垃圾的基本信息，并能根据自己的实际情况便捷考虑是否将废品出售，在用户选择好要出售的废品并提交订单之后，系统将自动派送回收员上门服务，收取废品，使用户足不出户就能将生活中的垃圾得到妥善处理，还能获得一定的收益，并且实现了资源的再利用。</p><p><strong>功能需求如下</strong>：</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/HelloBird-1.jpg" alt=""></p><h4 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h4><p>&emsp;”HelloBird”项目客户端采用微信web平台，使用JavaEE做后台架构，数据采用的是关系型数据库MySQL。在后台架构上，采用SSM(Spring+SpringMVC+Mybatis)框架，Mybatis负责持久层操作，SpringMVC作为前端控制器，处理前台和后台的交互，Spring作为IOC容器，为Mybatis和SpringMVC提供支持(事物操作等)。</p><p><strong>架构图如下</strong>：</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/HelloBird-2.jpg" alt=""></p><p><strong>页面逻辑图如下</strong>：<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/HelloBird-3.JPG" alt=""></p><h4 id="项目中遇到的问题"><a href="#项目中遇到的问题" class="headerlink" title="项目中遇到的问题"></a>项目中遇到的问题</h4><ul><li><strong>使用json进行前后台数据交互的格式：</strong> 该项目使用json作为前后台数据传输的格式，SpringMVC的两个注解非常友好的帮我进行封装于实现，封闭式@ResponseBody和@RequestBody，@ResponseBody负责将数据包装成json字符串返回给前台，@RequestBody则将从前台接收到的数据包装成对应的JavaBean对象。在使用过程中，出现了中文字符乱码问题，后来进行了解决。</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1. 使用如下配置可解决字符乱码问题(全局设置)：</span><br><span class="line"><span class="variable">&lt;mvc:annotation-driven&gt;</span></span><br><span class="line">      <span class="variable">&lt;mvc:message-converters&gt;</span></span><br><span class="line">            <span class="variable">&lt;bean class="org.springframework.http.converter.StringHttpMessageConverter"&gt;</span></span><br><span class="line">                <span class="variable">&lt;property name="supportedMediaTypes"&gt;</span></span><br><span class="line">                    <span class="variable">&lt;list&gt;</span></span><br><span class="line">                        <span class="variable">&lt;value&gt;</span>application/json;charset=UTF-8<span class="variable">&lt;/value&gt;</span></span><br><span class="line">                    <span class="variable">&lt;/list&gt;</span></span><br><span class="line">                <span class="variable">&lt;/property&gt;</span></span><br><span class="line">            <span class="variable">&lt;/bean&gt;</span></span><br><span class="line">        <span class="variable">&lt;/mvc:message-converters&gt;</span></span><br><span class="line">    <span class="variable">&lt;/mvc:annotation-driven&gt;</span></span><br><span class="line"></span><br><span class="line">2.使用produces = <span class="string">"text/html;charset=UTF-8"</span>也能解决中文乱码问题</span><br><span class="line"><span class="meta">@RequestMapping(value</span> = <span class="string">"/regist"</span>, method = RequestMethod.POST,  produces = <span class="string">"text/html;charset=UTF-8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">public Map<span class="variable">&lt;Integer, Object&gt;</span> regist(<span class="meta">@RequestBody</span> User user)&#123;</span><br><span class="line"></span><br><span class="line">    Map<span class="variable">&lt;Integer, Object&gt;</span> map = new HashMap<span class="variable">&lt;&gt;</span>();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //用户注册</span><br><span class="line">        map = userService.regist(user);</span><br><span class="line"></span><br><span class="line">    &#125;catch (Exception e)&#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.在请求头中进行设置</span><br><span class="line">response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);   </span><br><span class="line">response.setContentType(<span class="string">"text/json;charset=UTF-8"</span>);  </span><br><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);  </span><br><span class="line">PrintWriter out = response.getWriter();  </span><br><span class="line">out.write(result);</span><br></pre></td></tr></table></figure><blockquote><p>上面所讲的第二种方法中，关于produces(还有一个 consumes)，可以查看此博客，做更深了解：</p><ul><li><a href="https://blog.csdn.net/walkerjong/article/details/7994326" target="_blank" rel="noopener">https://blog.csdn.net/walkerjong/article/details/7994326</a></li></ul></blockquote><ul><li><strong>Transfer-Encoding:chunked和Content-Disposition:inline;filename=f.txt问题：</strong> 在做项目的时候，响应头里面出现了 Transfer-Encoding:chunked和Content-Disposition:inline;filename=f.txt，让我百思不得其解，后来经过多方查阅，终于让我弄明白了到底是设么意思。</li></ul><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/HelloBird-4.jpg" alt=""></p><ol><li><p>Transfer-Encoding:chunked 简单来说，Transfer-Encoding是一个Http的头部字段，意思是传输编码。而chunked是分块传输的意思，就是说对于输出内容长度不确定的，如gzip格式等，就会用到分块传输技术。参考博客：</p><ul><li><a href="https://blog.csdn.net/whatday/article/details/7571451" target="_blank" rel="noopener">https://blog.csdn.net/whatday/article/details/7571451</a></li><li><a href="https://imququ.com/post/transfer-encoding-header-in-http.html" target="_blank" rel="noopener">https://imququ.com/post/transfer-encoding-header-in-http.html</a></li></ul></li><li><p>Content-Disposition:inline;filename=f.txt 初遇这个响应头的时候我也是有点懵，不知道什么意思，后来也搞明白了。该属性设置的是在文件下载时对下载文件的一个标识字段。参考链接：</p><ul><li><a href="https://blog.csdn.net/dabinge1/article/details/52587662" target="_blank" rel="noopener">https://blog.csdn.net/dabinge1/article/details/52587662</a></li></ul></li></ol><ul><li><strong>session问题和token的使用：</strong> 该项目是基于微信小程序的，在保存用户登录状态和身份验证这一点上，我首先想到了用session，同时我想项目比较小，可以把用户的购物车放在session中，一次会话结束就将session里面的购物车清除，后来我发现了这其中的问题。首先：微信小程序不支持Cookie(意味着session也用不了)，这在项目后期对于我的打击肯定是很大的，因为我的好多业务逻辑都是基于session的，session用不了那么项目就瘫痪了一大半，后来经过冷静思考也发现的我设计的问题，关于session的问题只是其次，用户的购物车放在session中，一次会话后就被清除，这显然是不合理的，对于用户的信息，我们需要把它固话在数据库中，后来我又重新增添一张表来保存用户的购物车，这个逻辑想明白之后，还有一点不知道怎么弄，session用不了，那用什么好呢？后来我想到了使用token。<ul><li>token是什么：token是一个加密的字符串，里面包含了后台给前台传递的加密信息(不容易被破解)<ul><li><a href="https://ninghao.net/blog/2834" target="_blank" rel="noopener">https://ninghao.net/blog/2834</a></li><li><a href="https://dombro96.github.io/2017/12/11/%E6%B5%85%E8%B0%88token/" target="_blank" rel="noopener">https://dombro96.github.io/2017/12/11/%E6%B5%85%E8%B0%88token/</a></li></ul></li></ul></li></ul><h4 id="一点总结——我的心里话"><a href="#一点总结——我的心里话" class="headerlink" title="一点总结——我的心里话"></a>一点总结——我的心里话</h4><p>&emsp;说实话，自己真正做完一个项目确实挺开心，特别是在把每一个接口都测试好，并且项目真正跑起来的时候，感觉身体特别放松，觉得付出的一切都值得。作为项目负责人，需要考虑的事情特别多，一边需要和团队成员沟通，讨论需求，讨论接口，另一边还需要思考如何进行后台的整个架构，还要关心项目的进度等等，虽然团队在磨合过程中确实出现了很多问题，比如由于前期的交流不充分，需求讨论的不清楚，导致后面的接口改了好多次。还有比如原先对微信小程序的机制不是太了解，差点导致项目崩盘等等。但好在我们都坚持了下来，不管这个项目做得好不好，但我们起码还是把它完成了，总的来说还是要谢谢我们的团队，谢谢这次做项目的经历，让我得到了锻炼与成长，同时也让我明白了作为一个项目负责人，应该明白如何和组员进行良好的沟通，应该有一个清晰的项目进度计划，应该制定一个完善的奖惩措施，应该统筹安排好每个分支的工作。确实，一次历练就是一次成长，一次成长对于整个人生来说弥足珍贵！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h4&gt;&lt;p&gt;&amp;emsp;”HelloBird”是一个基于微信小程序搭建的资源回收o2o平台，目的是为了实现废旧资源的流转。在”Hello
      
    
    </summary>
    
      <category term="我的项目" scheme="http://yoursite.com/categories/%E6%88%91%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 新特性——lambda表达式</title>
    <link href="http://yoursite.com/2018/04/21/Java-8-%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/21/Java-8-新特性——lambda表达式/</id>
    <published>2018-04-21T08:00:42.000Z</published>
    <updated>2018-04-21T08:31:42.647Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是lambda表达式？"><a href="#什么是lambda表达式？" class="headerlink" title="什么是lambda表达式？"></a>什么是lambda表达式？</h4><p>1.lambda 表达式是一个可传递的代码块，可以在以后执行一次或者多次 —–&gt;《Java核心技术》<br>2.lambda 表达式是一个匿名函数</p><h4 id="为什么使用lambda表达式？"><a href="#为什么使用lambda表达式？" class="headerlink" title="为什么使用lambda表达式？"></a>为什么使用lambda表达式？</h4><p>先看一个例子，这是一个典型的比较器，使用这个比较器可以对任意字符串按长度进行排序。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;<span class="keyword">String</span>&gt; com = <span class="keyword">new</span> Comparator&lt;<span class="keyword">String</span>&gt;() &#123;  </span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> compare(<span class="keyword">String</span> first, <span class="keyword">String</span> <span class="built_in">second</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> first.length()-<span class="built_in">second</span>.length();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">String</span>[] <span class="built_in">str</span> = &#123;<span class="string">"saddsa"</span>, <span class="string">"sdadcsa"</span>,<span class="string">"rgeavrr"</span>, <span class="string">"csfdcwe"</span>&#125;;<span class="comment">//如果使用Arrays类中的sort()方法，只能按照字典顺序排序。假如想要对其</span></span><br><span class="line">                                                         <span class="comment">//按照长度排序，需要传入比较器</span></span><br><span class="line">Arrays.<span class="built_in">sort</span>(<span class="built_in">str</span>, com);</span><br></pre></td></tr></table></figure><p>分析这段代码，其实我们不难发现，在执行排序方法的时候。compare() 方法并非只执行一次，在数组完成排序之前，sort() 方法会一直调用compare() 方法，只要元素的顺序不正确就会重新排列元素，将比较所需的 <em>代码块(s1.length()-s2.length())</em> 放在 sort() 方法中，与其他的排序逻辑集成然后完成排序。也就是是说，这里存在一个不断回调的过程。</p><p>这么一分析，我们发现，真正参与排序逻辑的只是 <em>代码块(s1.length()-s2.length())</em> 罢了。也许我们会想，为什么不直接给 sort() 方法传递这个代码块，而需要给它传递一个 Comparator 实例呢？这样不会显得过于繁琐吗？实际上，在Java 8 之前，我们也只能这样去做，Java是面向对象的语言，假若我们需要传递某段代码块，必须构造一个对象，这个对象的类需要有一个方法包含所需的代码。难道就没有解决的办法了？当然不是！</p><p>Java 8 推出了 lambda 表达式，能非常完美的解决这个问题，可以使代码变得更加简洁，灵活，优雅。(这时你可以思考一下Java语言为什么美？)</p><p><em>废话不多说，直接上代码</em></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  //第一种方式</span><br><span class="line"> Comparator&lt;String&gt; com = (<span class="built_in">first</span>, <span class="built_in">second</span>) -&gt; <span class="built_in">first</span>.<span class="built_in">length</span>() - <span class="built_in">second</span>.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line"> String[] str = &#123;<span class="string">"saddsa"</span>, <span class="string">"sdadcsa"</span>,<span class="string">"rgeavrr"</span>, <span class="string">"csfdcwe"</span>&#125;;</span><br><span class="line"></span><br><span class="line"> Arrays.<span class="built_in">sort</span>(str, com);</span><br><span class="line"></span><br><span class="line"> //第二种方式</span><br><span class="line">Arrays.<span class="built_in">sort</span>(str, (<span class="built_in">first</span>, <span class="built_in">second</span>) -&gt; <span class="built_in">first</span>.<span class="built_in">length</span>() - <span class="built_in">second</span>.<span class="built_in">length</span>());</span><br></pre></td></tr></table></figure><p> 看到没有，看到没有，这就是差距！你那么多废话，我一句就搞定，而且我效率还比你高，这就是强！<br> 现在，让我们一起进入 lambda表达式 的世界，请在开始之前想一想刚才我所说的：<em>lambda表达式传递的是代码块(函数)，请暂时忘掉对象</em></p><h4 id="如何使用lambda表达式"><a href="#如何使用lambda表达式" class="headerlink" title="如何使用lambda表达式"></a>如何使用lambda表达式</h4><ol><li>-&gt; :lambda 操作符，它将 lambda表达式 分为两个部分<br>&emsp;左侧：指定 lambda表达式 所需要的所有参数<br>&emsp;右侧：lambda表达式的主体，即 lambda表达式 要执行的功能</li></ol><ol start="2"><li>lambda表达式语法</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line">Runnable r1 = () -&gt; System.<span class="keyword">out</span>.println(<span class="string">"Hello World"</span>);<span class="comment">//即使没有参数，也要提供括号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line">Consumer&lt;String&gt; <span class="function"><span class="keyword">fun</span> = <span class="params">(args)</span></span> -&gt; System.<span class="keyword">out</span>.println(args);<span class="comment">//方法带参数，需要传入一个参数</span></span><br><span class="line">Consumer&lt;String&gt; <span class="function"><span class="keyword">fun</span> = args -&gt; System.<span class="keyword">out</span>.<span class="title">println</span><span class="params">(args)</span></span>;<span class="comment">//lambda 只需要一个参数时，参数的小括号可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line">BinaryOperator&lt;long&gt; bo = (x, y) -&gt; &#123;  <span class="comment">//lambda 需要两个参数，并且有返回值</span></span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"实现接口"</span>);</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line">BinaryOperator&lt;long&gt; bo = (long x, long y) -&gt; x + y;<span class="comment">//当lambda体只有一条语句时，return和大括号可以省略</span></span><br><span class="line"></span><br><span class="line">BinaryOperator&lt;long&gt; bo = ( x,  y) -&gt; x + y;<span class="comment">//类型可以省略，Java可以通过上下文推断得出，称为类型推断</span></span><br></pre></td></tr></table></figure><h4 id="函数式接口——理解-lambda表达式的关键"><a href="#函数式接口——理解-lambda表达式的关键" class="headerlink" title="函数式接口——理解 lambda表达式的关键"></a>函数式接口——理解 lambda表达式的关键</h4><p>任何接口，如果只包含唯一一个抽象方法，那么它就是一个<a href="http://blog.csdn.net/zxhoo/article/details/38349011" target="_blank" rel="noopener">函数式接口</a><br>&emsp;注意：这里说函数式接口必须有一个抽象方法也许会使大家疑惑。我们会想接口中所有的方法不都是抽象的吗？<br>实际上，接口完全有可能重新    声明Object类的 toString， clone 等方法，这些声明有可能会让方法不再是抽象的。<br>不过，默认方法和静态方法不会破坏函数式接口的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span><span class="comment">//该注解会强制检查该接口是不是一个函数式接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FunctionalDefaultMethods</span> </span>&#123;</span><br><span class="line">             <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">             <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;    <span class="comment">//允许默认方法        </span></span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>lambda表达式只支持函数式接口，因为lambda表达式到最后只能转换为函数式接口。其实就我个人理解而言，这是一种必要的转换，lambda表达式本来就是为了方便某个重复性的功能，使对象的概念弱化，凸显逻辑代码的地位(也就是代码块)。如果不是函数式接口，你弄他好几个方法，lambda表达式总不能一次性全部去执行吧，这在逻辑上也是行不通的。这纯属是我对函数式接口的个人理解，也许会有误，欢迎讨论。</p><h4 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h4><p>前面说过，如果 lambda表达式 的代码块只有一条代码，可以省略花括号。同样的，你也可以使用方法引用和构造器引用。使用方法引用和构造器引用可以使代码阅读性更强，更简洁。</p><ul><li><strong>方法引用</strong>    <a href="http://www.cnblogs.com/JohnTsai/p/5806194.html" target="_blank" rel="noopener">戳一戳 1</a>   <a href="http://www.cnblogs.com/xiaoxi/p/7099667.html" target="_blank" rel="noopener">戳一戳 2</a><br>方法引用有四种情况(在Java核心技术中分为三种情况，这里我把构造器引用也归入方法引用之中，因为实际上构造器不也是方法嘛)<ol><li>object::InstanceMethodName             引用对象的实例方法</li><li>ClassName::staticMethodName         引用类的静态方法(普通类)</li><li>Class::instanceMethodName              引用类型对象的实例方法(比如String)</li><li>ClassName::new                                 引用构造方法         </li></ol></li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Timer t = <span class="keyword">new</span> Timer(<span class="number">1000</span>, ele -&gt; System.out.<span class="built_in">println</span>(ele));<span class="comment">//添加一个定时器，每隔1秒打印一次 ele</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法引用可以写成（与上面的等价）</span></span><br><span class="line">Timer t = <span class="keyword">new</span> Timer(<span class="number">1000</span>, System.out::<span class="built_in">println</span>);<span class="comment">//直接将 println 方法传递给构造器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对字符串排序</span><br><span class="line">Arrays.<span class="built_in">sort</span>(<span class="built_in">str</span>, <span class="keyword">String</span>::compareToIgnoreCase);<span class="comment">//等价于 (x, y) -&gt; x.compareToIgnoreCase(y)</span></span><br><span class="line">                                                <span class="comment">//类似的 Math::pow 等价于 (x, y) -&gt; Math.pow(x, y);</span></span><br><span class="line"></span><br><span class="line">假如有多个重载的同名方法，编译器会尝试从上下文找出你指的那一个方法。不知不觉，Java又强势装逼一波。</span><br></pre></td></tr></table></figure><ul><li><strong>构造器引用——主要与Stream结合使用</strong>：与方法引用类似，将方法名换为new。</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有一个字符串列表，将其转换为Person对象数组，需要在字符串上调用构造器</span></span><br><span class="line">ArrayList&lt;<span class="built_in">String</span>&gt; names = <span class="params">...</span>..;</span><br><span class="line">Stream&lt;Person&gt; stream = names.stream().<span class="built_in">map</span>(Person<span class="type">::new</span>);<span class="comment">//Person::new 是 Person构造器 的一个引用</span></span><br><span class="line"><span class="built_in">List</span>&lt;Person&gt; people = stream.collect(Collection.toList);</span><br></pre></td></tr></table></figure><ul><li>数组也可以建立构造器引用</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int[]:<span class="type"></span>:<span class="keyword">new</span> <span class="type"></span>等价于 x -&gt; <span class="keyword">new</span> <span class="type">int</span>[]</span><br><span class="line"></span><br><span class="line"><span class="comment">//将流中的对象转换为对象数组</span></span><br><span class="line">Person[] person = stream.toArray(Person[]:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>);</span><br></pre></td></tr></table></figure><h4 id="处理lambda表达式"><a href="#处理lambda表达式" class="headerlink" title="处理lambda表达式"></a>处理lambda表达式</h4><p>通过上面的介绍，我们或许对lambda表达式有了进一步的理解，现在我们将学会怎样去使用lambda表达式。</p><blockquote><p>使用lambda表达式的重点是为了延迟执行，下面是使用lambda表达式的几个场景<br>    1.在一个单独的线程中运行代码<br>    2.多次运行代码<br>    3.在算法的适当位置运行代码（排序中的比较操作）<br>    4.发生某种情况时执行代码（点击按钮数据到达）</p></blockquote><p>其实，我们可以想一想，这些情况大多在哪里出现呢？想到排序，想到比较，这很容易让我们联想到集合和数组。嗯，就我现阶段的水平而言，或许我只能理解lambda表达式在集合和数组中给我带来的便利，但我想这也就足够了。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这就是一个比较常规的用法,可以把lambda表达式作为参数传递给方法，而且需要注意，lambda表达式的参数必须是一个函数式接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> repeat(<span class="keyword">int</span> n , Runnable action)&#123;</span><br><span class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)</span><br><span class="line">    action.<span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="number">10</span>, () -&gt; System.out.<span class="built_in">println</span>(<span class="string">"Hello, world"</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是lambda表达式？&quot;&gt;&lt;a href=&quot;#什么是lambda表达式？&quot; class=&quot;headerlink&quot; title=&quot;什么是lambda表达式？&quot;&gt;&lt;/a&gt;什么是lambda表达式？&lt;/h4&gt;&lt;p&gt;1.lambda 表达式是一个可传递的代码块，可以在
      
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java新特性" scheme="http://yoursite.com/tags/Java%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
      <category term="lambda表达式" scheme="http://yoursite.com/tags/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>迭代器模式——Iterator</title>
    <link href="http://yoursite.com/2018/04/16/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94Iterator/"/>
    <id>http://yoursite.com/2018/04/16/迭代器模式——Iterator/</id>
    <published>2018-04-16T04:46:31.000Z</published>
    <updated>2018-04-22T05:38:10.930Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于迭代器-Iterator"><a href="#关于迭代器-Iterator" class="headerlink" title="关于迭代器(Iterator)"></a>关于迭代器(Iterator)</h4><p>&emsp;迭代器这个名词想来我们已经不陌生了，在集合中我们就学习过迭代器，并掌握了如何使用迭代器来遍历集合中的元素。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="built_in">list</span>.add(<span class="string">"anc"</span>);</span><br><span class="line"><span class="built_in">list</span>.add(<span class="string">"cvl"</span>);</span><br><span class="line"><span class="built_in">list</span>.add(<span class="string">"uio"</span>);</span><br><span class="line"><span class="built_in">list</span>.add(<span class="string">"ope"</span>);</span><br><span class="line"></span><br><span class="line">Iterator iterator = <span class="built_in">list</span>.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">      System.out.print(<span class="built_in">list</span>.next());</span><br><span class="line">&#125;</span><br><span class="line">输出：anc cvl uio ope</span><br></pre></td></tr></table></figure><p>&emsp;实际上，迭代器就是反复同一件事的一个循环，就如同for(int i = 0; i &lt; 100; i++)中的i++，只要符合条件就加1，直到遍历完每一个元素后就退出，而迭代器模式(Iterator模式)的思想也就是来自于此。迭代器模式是一种没落的模式，除非产品性质的需要，否则不会单独去写一个迭代器模式(Java中的集合就对迭代器模式进行优秀的封装，基本上不用认为扩展，都能满足我们的需求)。我们可以看看迭代器的定义：迭代器提供一种方法访问一个容器对象中各个元素，而又不暴露该对象的细节。通俗点说，迭代器的诞生就是为遍历容器(容器就是能持有对象的集合，如Collection，Set)中的元素服务的。</p><h4 id="迭代器模式——你在不在？我要揍你一顿"><a href="#迭代器模式——你在不在？我要揍你一顿" class="headerlink" title="迭代器模式——你在不在？我要揍你一顿"></a>迭代器模式——你在不在？我要揍你一顿</h4><p>&emsp;<strong>举一个例子，详细讲讲什么是迭代器模式</strong></p><blockquote><p>&emsp;在一个风和日丽的早晨，阳光明媚，春暖花开，打开古老的藏书阁，我要找一本心仪的古书陶冶一下情操，可是让我很郁闷的是，由于时间太久没人整理，很多书都凌乱的放在书架上，所以我费了老大的劲儿才把书籍找到。我就在想，要是有一个这样的物件就好了，它能在我想要从一堆杂乱无章的事物中寻找某一件东西时，它能按整齐的把它排列(排列顺序自己选择)好，这样我找的时候不就容易多了，我冥思苦想很久，找了很多上古典籍查阅(《设计模式之禅》，《图解设计模式》)中找到了答案，那就是上古秘书——迭代器模式。</p></blockquote><blockquote><p>&emsp;现有一个书架BookShelf，有一堆书Book，我想把书放到书架上，并按照书的名字按顺序显示出来。看一下示例图</p></blockquote><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Iterator-1.JPG" alt=""></p><p><strong>程序的类图如下</strong></p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Iterator-2.JPG" alt=""></p><p><strong>类和接口</strong></p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Iterator-3.JPG" alt=""></p><p><strong>逐步剖析(请直接看代码)</strong></p><p><strong>Aggregate接口</strong>：表示集合的接口，相当于Java集合中Collection，List等集合接口<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示集合的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Aggregate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 该方法用于生成一个遍历结合的迭代器</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 在遍历集合中的元素时吗，调用iterator方法生成一个实现了Iterator接口的类的实例</span></span><br><span class="line"><span class="comment">   * @return</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator <span class="title">iterator</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Iterator接口</strong>：表示用于遍历集合的接口</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于遍历集合的接口：遍历集合中的元素，其作用相当于循环语句中的循环变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否存在下一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> hasNext();</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回集合中的一个元素</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Object next();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BookShelf类</strong>：实现了Aggregate接口，表示一个书籍的集合，可以看成Java集合框架中的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示书架类，可以看成是一个书的集合，所以需要实现Aggregate接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Book[] books;<span class="comment">// 可见性设置为private，避免不小心篡改</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> last;<span class="comment">//标识最后一本书的索引</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BookShelf</span><span class="params">(<span class="keyword">int</span> maxsize)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.books = <span class="keyword">new</span> Book[maxsize];<span class="comment">// 生成BookShelf实例的时候指定了books的大小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//根据索引得到书籍</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getBookAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> books[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向书架上添加书籍</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.books[last] = book;</span><br><span class="line">     last++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回书籍的数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> BookShelfIterator&lt;T&gt;(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BookShelfIterator类</strong>：Iterator的实现类</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历书籍的迭代器实现(Iterator)类</span></span><br><span class="line"><span class="comment"> * @param &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> BookShelf&lt;T&gt; bookShelf;<span class="comment">//表示BookShelfIterator要遍历的书架</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">index</span>;<span class="comment">//表示迭代器当前指向的书的索引</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">public</span> BookShelfIterator(BookShelf&lt;T&gt; bookShelf) &#123;</span><br><span class="line">      <span class="keyword">this</span>.bookShelf = bookShelf;</span><br><span class="line">      <span class="keyword">this</span>.<span class="keyword">index</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> @Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> hasNext() &#123;</span><br><span class="line">&lt;!-- <span class="keyword">if</span> (<span class="keyword">index</span> &lt; bookShelf.getLength()) &#123;<span class="comment">//如果当前索引小于书架书籍的数量，表名下一本书还存在，继续遍历</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; --&gt;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">index</span> != bookShelf.getLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * next()方法有两个作用：</span></span><br><span class="line"><span class="comment"> * &gt;返回当前索引对应的书籍实例</span></span><br><span class="line"><span class="comment"> *          &gt;并将index指向下一个元素 &gt;&gt;&gt;&gt; 这和for循环中的i++很像</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Object next() &#123;</span><br><span class="line">     Book book = bookShelf.getBookAt(<span class="keyword">index</span>);<span class="comment">//将对应索引的书一一返回</span></span><br><span class="line">     <span class="keyword">index</span>++;</span><br><span class="line">     <span class="keyword">return</span> book;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Book类</strong>：书籍类(实体类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>();</span><br><span class="line">     <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Book [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下面是Main方法</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">public</span> class Main &#123;</span><br><span class="line"></span><br><span class="line">  public static void main(<span class="keyword">String[] </span>args) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">BookShelf&lt;Book&gt; </span><span class="keyword">bookShelf </span>= new <span class="keyword">BookShelf&lt;&gt;(4);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">bookShelf.appendBook(new </span><span class="keyword">Book("雪国"));</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">bookShelf.appendBook(new </span><span class="keyword">Book("山中古音"));</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">bookShelf.appendBook(new </span><span class="keyword">Book("天堂"));</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">bookShelf.appendBook(new </span><span class="keyword">Book("一个人的路"));</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">Iterator </span><span class="keyword">iterator </span>= <span class="keyword">bookShelf.iterator();</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">while</span>(<span class="keyword">iterator.hasNext()) </span>&#123;</span><br><span class="line">      System.out.println(<span class="keyword">iterator.next());</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"><span class="keyword">Book </span>[name=雪国]</span><br><span class="line"><span class="keyword">Book </span>[name=山中古音]</span><br><span class="line"><span class="keyword">Book </span>[name=天堂]</span><br><span class="line"><span class="keyword">Book </span>[name=一个人的路]</span><br></pre></td></tr></table></figure><h4 id="集合框架中的迭代器模式-源码解析"><a href="#集合框架中的迭代器模式-源码解析" class="headerlink" title="集合框架中的迭代器模式(源码解析)"></a>集合框架中的迭代器模式(源码解析)</h4><p>&emsp;上面是我们自己写的迭代器模式，用我们自己的想法实现了一个简单的迭代器，怎么样，你对迭代器了解有多少了呢，如果你还是不清楚，那我们再来看看Java集合框架是如何运用迭代器的。我将主要以源码的方式解析，你会发现其实和我上面写的差不多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">我就使用List接口进行解析，List定义了如下方法</span><br><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">Iterator接口：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法与函数式接口有关(lambda表达式)</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以List的一个实现类ArrayList来看看如何实现的</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Itr是AbstractList的一个成员内部类(其实ArrayList也有一个Itr的成员内部类</span></span><br><span class="line">  只不过这是优化版本)</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> cursor;       <span class="comment">//表示下一个要访问的元素的索引</span></span><br><span class="line">      <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">//表示上一个元素的索引</span></span><br><span class="line">      <span class="keyword">int</span> expectedModCount = modCount;<span class="comment">//表示对ArrayList修改次数的期望值，它的初始值为modCount(modCount是AbstractList类中的一个成员变量)</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         checkForComodification();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">int</span> i = cursor;<span class="comment">//下一个元素的索引</span></span><br><span class="line">             E next = get(i);<span class="comment">//通过该索引得到实例</span></span><br><span class="line">             lastRet = i;<span class="comment">//将该索引赋值给表示上一个元素索引的变量</span></span><br><span class="line">             cursor = i + <span class="number">1</span>;<span class="comment">//指向下一个元素</span></span><br><span class="line">             <span class="keyword">return</span> next;<span class="comment">//返回当前实例</span></span><br><span class="line">         &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">             checkForComodification();</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">         checkForComodification();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             AbstractList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">             <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">                 cursor--;</span><br><span class="line">             lastRet = -<span class="number">1</span>;</span><br><span class="line">             expectedModCount = modCount;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="深入研究一下"><a href="#深入研究一下" class="headerlink" title="深入研究一下"></a>深入研究一下</h4><p>&emsp;OK，上面就是迭代器在集合框架中的使用，现在我们或许就理解了为什么在学习集合的迭代器器时说，我们是去获取一个迭代器，而并非是我们new一个迭代器对象，下面我们来看看迭代器模式的类图，并分析一下我们为什么要使用迭代器</p><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/Iterator-4.JPG" alt=""></p><ul><li><strong>Iterator(迭代器)</strong>：该角色定义了顺序逐个遍历元素的接口</li><li><strong>ConcreteIterator(具体的迭代器)</strong>：实现Iterator接口</li><li><strong>Aggregate(集合)</strong>：定义创建Iterator角色的接口</li><li><strong>ConcreteAggregate(具体的集合)</strong>：该角色负责实现Aggregate所定义的接口</li></ul><p>&emsp;看了上面介绍的迭代器模式，我们或许头有点晕，既然同是迭代，为什么我们不去使用更为普通的迭代方式，如for循环呢，非要用这种复杂的设计模式干什么，其实回到前面迭代器模式的定义：迭代器模式提供一种顺序访问一个聚合对象中各个元素的方法，而又不暴露该对象的内部实现。</p><blockquote><p>举个例子：我是车站的售票员，对于我来说，我只是负责售票的，其他的事情我一概不管，对于我来说，只有一个原则，那就是只有买了票才能乘车，不管你是中国人外国人，不管你是小偷还是杀人犯，只要你没买票就不能乘车，我不用管乘车对象是什么，我只管你有没有买票。</p></blockquote><p>&emsp;如同上面举的那个例子，这里只是用了Iterator的hasNext和next方法，并没有调用BookShelf的方法，也就是说，while循环并不依赖于BookShelf的实现。不管BookShelf如何变化，只要BookShelf的iterator方法能返回正确的Iterator实例，即使不对while循环做任何修改，都可以正常工作。设计模式的作用就是帮助我们编写可复用的类。而可复用的含义就是将类视为“组件”，当一个组件方法发生变化时，不需要对其他组件进行修改或者只需要进行很小的修改就可以了，大大提高了代码的重用率。</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">iterator</span>.hasNext())&#123;</span><br><span class="line">  <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">iterator</span>.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>迭代器模式是一种古老的设计模式，也是一种非常常见的设计模式，它已经完美的镶嵌于聚合关系中，如Java的集合框架，几乎每一个集合类都对迭代器模式进行了封装。正是由于它的普遍性，所以很多大佬都提出将迭代器模式从23中设计模式中删除。不管迭代器模式在未来是否还能存在于设计模式家族中，我们只需要知道，应用之广泛则证明其价值，所以值得我们去学习研究它的思想精髓。</p><h4 id="推荐书籍与网站："><a href="#推荐书籍与网站：" class="headerlink" title="推荐书籍与网站："></a>推荐书籍与网站：</h4><ul><li><strong>《图解设计模式》 《大话设计模式》 《设计模式》 《Java设计模式》</strong></li></ul><ul><li><a href="http://www.cnblogs.com/dolphin0520/p/3933551.html" target="_blank" rel="noopener">http://www.cnblogs.com/dolphin0520/p/3933551.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;关于迭代器-Iterator&quot;&gt;&lt;a href=&quot;#关于迭代器-Iterator&quot; class=&quot;headerlink&quot; title=&quot;关于迭代器(Iterator)&quot;&gt;&lt;/a&gt;关于迭代器(Iterator)&lt;/h4&gt;&lt;p&gt;&amp;emsp;迭代器这个名词想来我们已经不
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>说说UML</title>
    <link href="http://yoursite.com/2018/04/15/%E8%AF%B4%E8%AF%B4UML/"/>
    <id>http://yoursite.com/2018/04/15/说说UML/</id>
    <published>2018-04-15T15:09:07.000Z</published>
    <updated>2018-04-16T01:02:24.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UML——继承"><a href="#UML——继承" class="headerlink" title="UML——继承"></a>UML——继承</h3><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E7%BB%A7%E6%89%BFUML.JPG" alt=""></p><h3 id="UML——实现"><a href="#UML——实现" class="headerlink" title="UML——实现"></a>UML——实现</h3><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E5%AE%9E%E7%8E%B0UML.JPG" alt=""></p><h3 id="UML——聚合"><a href="#UML——聚合" class="headerlink" title="UML——聚合"></a>UML——聚合</h3><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E8%81%9A%E5%90%88UML.JPG" alt=""></p><blockquote><p>聚合表示持有对象，是一种一对多的关系，比如图中的Basket中定义了一个Fruits的数组，表示可以持有Fruit的多个对象</p></blockquote><h4 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h4><ul><li><a href="https://blog.csdn.net/qq_31655965/article/details/54645220" target="_blank" rel="noopener">https://blog.csdn.net/qq_31655965/article/details/54645220</a></li><li><a href="https://www.cnblogs.com/scevecn/p/5663369.html" target="_blank" rel="noopener">https://www.cnblogs.com/scevecn/p/5663369.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;UML——继承&quot;&gt;&lt;a href=&quot;#UML——继承&quot; class=&quot;headerlink&quot; title=&quot;UML——继承&quot;&gt;&lt;/a&gt;UML——继承&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yuangh
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="UML" scheme="http://yoursite.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>Java中的引用</title>
    <link href="http://yoursite.com/2018/04/13/Java%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/13/Java中的引用/</id>
    <published>2018-04-13T15:47:41.000Z</published>
    <updated>2018-04-15T11:22:39.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java中的引用"><a href="#java中的引用" class="headerlink" title="java中的引用"></a>java中的引用</h2><p>&emsp;在Java中，引用是一种神奇的东西，通过引用我们可以完成很多事情。习以为常的我们往往忽略了一些本质的东西。我们浅显的以为引用无非就是用于对象调用的，真的是这样吗？你真正了解了Java中的引用了吗？让我们透过现象看本质，去了解一些更深的东西。在讨论引用之前，我们先聊聊对象这种东西。</p><h4 id="对象——一个神奇的物种-我无所不能"><a href="#对象——一个神奇的物种-我无所不能" class="headerlink" title="对象——一个神奇的物种(我无所不能)"></a>对象——一个神奇的物种(我无所不能)</h4><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E5%AF%B9%E8%B1%A1.JPG" alt=""></p><p>&emsp;看了这张图也许大家都对对象这玩意儿有了很深刻的印象了，以前一直问对象是什么，对象长什么样，好吧，我告诉大家，对象就长这样（哈哈哈哈。。。。此处省略一万字）。为什么说对象是一个很神奇的物种，就我自己的理解，给出如下解释：</p><ul><li>封装的完美性：对象是一个实实在在的个体(在堆中有自己的空间)，就如同我们一个完整的人一样，都在这大千世界占据着一个空间。一个对象的生成和一个人诞生很相似，都要经过一个异常复杂的过程。人需要十月怀胎，而一个对象从Java虚拟机接到命令(new : 喂，生一个对象出来)到创建一个对象出来需要经历很大周折，有的需要“千万年”，有的需要“几亿年”，有的可能直接挂掉(想想人家CPU的时间周期，我们的1秒就是人家的百亿年了。。。)。怎么样，对象的创建是不是很不容易，所以创建对象一定要慎重(反射技术就能提前对对象进行剖腹产，很多框架都使用了这种技术，其中Spring中的依赖注入(DI)就是对这种技术的深刻运用。。。)。好了，扯皮了半天，知道了对象是咋来的，该说说为啥说封住的完美了，其实还是类比我们人一样，对象头就好比人的头一样，人要靠五官观四方，听八方，对象也需要他存储的一些比如哈希码，指向类元素的指针等来定位一个对象等等，实例数据区就如同我们的身体四肢，大家可以脑补我们可以干什么。就是由于这种近乎偏执严谨完美的封装，才能让对象在Java世界里徜徉，无所不能。</li><li>关于对象无所不能的特性，我就不多赘述了，随着学习的深入，大家会慢慢发现，没有对象干不了的事，或许我该这样表达，我们下意识的都会想着用对象去干些什么，也许这就是Java设计的初衷——万物皆对象。</li></ul><hr><p>好了，扯了这么半天，也该说说引用是啥玩意了，在具体的说引用之前，还是放两张图，暖暖肠胃。<br>下面是访问对象的两种方式，也是指针最直观的运用。</p><ul><li>使用句柄访问<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9A%E4%BD%8D1.JPG" alt=""></li></ul><blockquote><p>使用句柄访问，Java堆中会划分出一块内存来作为句柄池，而reference中存储的就是句柄的地址，句柄包含了对象实例数据与类型数据各自的具体地址信息。</p><ul><li>优势：reference中存储的是稳定的句柄地址，在对象被移动时(比如Java虚拟机在执行垃圾回收时就经常移动对象)时只会改变实例数据指针，而reference本身不需要修改。</li><li>劣势：时间太慢，相比于直接指针访问，多了一次定位开销。</li></ul></blockquote><ul><li>直接指针访问<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/008c851269e091cd45301c2138e2494a15ba39d5/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9A%E4%BD%8D2.JPG" alt=""></li></ul><blockquote><p>使用直接指针访问：reference直接指向Java堆中的实例数据，reference中存储的直接是对象的地址。和第一种对比，优劣可自行观之。</p></blockquote><p>&emsp;这里也简单说一下为什么会有这两种定位方式：Java程序需要通过栈上的reference来操作堆上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位，访问堆中对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。</p><h3 id="引用是啥玩意儿"><a href="#引用是啥玩意儿" class="headerlink" title="引用是啥玩意儿"></a>引用是啥玩意儿</h3><p>&emsp;在Java学习的基础阶段，我们对引用的概念只停留在初级阶段：也就是引用代表一个对象，或者引用中存放着对象在堆内存中的地址，通过引用可以找到这个对象，并操作对象上的实例数据。这种理解本没有错，不过只是停留在比较浅显的层次。其实，从更深的角度去理解，引用在Java中有着举足轻重的地位。</p><p>&emsp;以前我们在学习C, C++的时候，对于开辟一段内存是一件颇为麻烦的事情，我们动态申请了一段内存，就需要在适当的位置把他free或者delete掉，否则就会出现很多溢出等问题，这就需要程序员更多的去关注内存问题，小心的检查每一份开辟的内存是否关闭，在哪个地方关闭，想想就很痛苦。Java是面向对象的语言，对象的产生就是内存的开辟，这就意味着内存的申请是频繁发生的，在Java中，一个new关键字就代表了一块内存的申请。我们平时new一个对象出来很舒服，而且也不用关心这个对象的内存在什么时候释放，只要尽管用就行了，那我们是否想过，why？</p><p>&emsp;其实这与Java虚拟机的垃圾回收机制有关，垃圾回收机制会帮我们自动的清理一些无用的对象，保存有用的对象，关于垃圾回收机制是很么，垃圾回收算法有哪些，在这里将不多赘述，有兴趣的可以等待我的后续更新。言归正传，说了这么半天，其实大家也应该猜到了，引用与对象的回收有着非常密切的关系，可以说，正是有了引用这玩意儿，垃圾回收才能如此给力(在这里小小的提一下：判断对象是否存活的两种算法——引用计数算法和可达性分析算法)。OK了，说了这么半天引用的厉害之处，也该好好说说什么是引用了。</p><p>&emsp;在JDK1.2之前，Java中引用的传统定义如下：如果Reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。（估计很多人的理解也就到这了……）在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为了四种，分别是：强引用(Strong Reference), 软引用(SoftReference), 弱引用(WeakReference), 虚引用(PhantomReference), 这四种引用强度依次逐渐减弱。下面分别举例介绍这四种引用：</p><ul><li><p>强引用(StrongReference): 强引用是最常见的一种引用，在Java中百分之九十九的都是常引用，通常用new关键字new出来的对象都指向一个强引用。例如Object object = new Object()，object就是new Object()这个对象的强引用，我们知道在Java中，对象是可以被多个引用指向的，只要有一个强引用还在，垃圾收集器永远不会回收掉被引用的对象。</p></li><li><p>软引用(SoftReference): 软引用是用来描述一些还有用但非必须的对象，强度上弱于强引用，在java.lang.ref包下的SoftReference类维护者软引用。它的作用是告诉垃圾回收器，程序中哪些对象是不那么重要的，在内存空间充足时可以被保留，而在内存空间不足时将会被暂时回收。软引用非常适合创建缓存，在系统内存不足时，缓存将会被释放。</p></li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">如下就是Java软引用的一个简单示例</span><br><span class="line"></span><br><span class="line"><span class="comment">//person强引用</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.out.println(person);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将person这个强引用包装成弱引用</span></span><br><span class="line">Reference&lt;Person&gt; reference = <span class="keyword">new</span> SoftReference&lt;Person&gt;(person);</span><br><span class="line"></span><br><span class="line"><span class="comment">//强引用为空，只剩下弱引用</span></span><br><span class="line">person = <span class="built_in">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.gc();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用get()方法来获取软引用所指向的对象</span></span><br><span class="line"><span class="keyword">System</span>.out.println(reference.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">com.reference.Person<span class="comment">@7852e922</span></span><br><span class="line"><span class="comment">com.reference.Person@</span><span class="number">7852e922</span></span><br></pre></td></tr></table></figure><ul><li><strong>弱引用(WeakReference):</strong> 弱引用也是用来描述非必须对象的，强度上弱于软引用，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。在java.lang.ref包下的WeakReference类维护着弱引用。弱引用的作用在于解决强引用所带来的对象之间在存活时间上的耦合关系，最常见的用途在于集合类中，特别是哈希表中(典型的是HashMap)。哈希表的接口允许使用任何Java对象作为键来使用。当一个键值对被放入到哈希表中之后，哈希表对象本身就有了对这些键和值对象的引用。如果这种引用是强引用的话，那么只要哈希表对象本身还存活，其中所包含的键和值对象是不会被回收的。如果某个存活时间很长的哈希表中包含的键值对很多，最终就有可能消耗掉JVM中全部的内存。对于这种情况就使用弱引用来引用这些对象，这样哈希表中的键和值对象都能被垃圾回收。</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> <span class="type">Integer</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Integer, Person&gt; w = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将i这个强引用包装成弱引用</span></span><br><span class="line">WeakReference&lt;Integer&gt; <span class="keyword">in</span> = <span class="keyword">new</span> <span class="type">WeakReference</span>&lt;&gt;(i);</span><br><span class="line"></span><br><span class="line">i = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将包装后的引用放入HashMap中</span></span><br><span class="line">i = <span class="keyword">in</span>.<span class="keyword">get</span>();    </span><br><span class="line">w.put(i, <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"xx"</span>, <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Before gc:"</span> + <span class="keyword">in</span>.<span class="keyword">get</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启垃圾回收    </span></span><br><span class="line">System.gc();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"After gc:"</span> + <span class="keyword">in</span>.<span class="keyword">get</span>());</span><br><span class="line"></span><br><span class="line">结果：Before gc:<span class="type">1</span></span><br><span class="line"><span class="type">     After gc</span>:<span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Java中WeakHashMap就可以避免上面所说的情况，它会自动将键值包装为弱引用类型</span></span><br><span class="line"></span><br><span class="line">WeakHashMap&lt;Integer, Person&gt; weak = <span class="keyword">new</span> <span class="type">WeakHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><ul><li>虚引用(PhantomReference): 虚引用也成幽灵引用或幻影引用，是最弱的一种引用关系。一个对象是否有虚引用存在，完全不会对其生命周期构成影响，也无法通过一个虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在java.lang.ref包下的PhantomReference维护着虚引用。<blockquote><p>其实虚引用是一个很偏的知识，与Java的对象终止化机制有关。大家可以去了解，在Java中有一个finalize方法，设计初衷就是一个对象在真正被回收前，执行一些清理的工作(就如同C++中的析构函数)。但是垃圾回收的运行时间是不用固定的，所以清理工作也不是提前预知的。而虚引用就可以解决这个问题，在创建一个虚引用的时候必须指定一个引用队列。当一个对象的finalize方法被调用了之后，这个对象的虚引用就会被加入到队列中，通过检查该队列中的内容就可以知道一个对象是不是准备要被回收了。</p></blockquote></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓冲区代码实现展示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PhantomBuffer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">private</span> ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt;();</span><br><span class="line">    <span class="keyword">private</span> PhantomReference&lt;<span class="keyword">byte</span>[]&gt; <span class="keyword">ref</span> = <span class="keyword">new</span> PhantomReference&lt;<span class="keyword">byte</span>[]&gt;(data, queue);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">get</span>(<span class="params"><span class="keyword">int</span> size</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Wrong buffer size"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (data.length &lt; size) &#123;</span><br><span class="line">            data = <span class="literal">null</span>;</span><br><span class="line">            System.gc(); <span class="comment">//强制运行垃圾回收器</span></span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                queue.<span class="keyword">remove</span>(); <span class="comment">//该方法会阻塞直到队列非空</span></span><br><span class="line">                <span class="keyword">ref</span>.clear(); <span class="comment">//幽灵引用不会自动清空，要手动运行</span></span><br><span class="line">                <span class="keyword">ref</span> = <span class="literal">null</span>;</span><br><span class="line">                data = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</span><br><span class="line">                <span class="keyword">ref</span> = <span class="keyword">new</span> PhantomReference&lt;<span class="keyword">byte</span>[]&gt;(data, queue);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">解释：每次申请新的缓冲区时，都要确保之前缓冲区的字节数组已经被成功回收。引用队列中的<span class="keyword">remove</span>()方法会阻塞直到新的虚引用被加入到队列中。</span><br></pre></td></tr></table></figure><ul><li><strong>引用队列(ReferenceQueue)：</strong> 在有些情况下，程序会需要在一个对象的可达到性发生变化的时候得到通知。比如某个对象的强引用都已经不存在了，只剩下软引用或是弱引用。但是还需要对引用本身做一些其他的处理。典型的情景是在哈希表中。引用对象是作为WeakHashMap中的键对象的，当其引用的实际对象被垃圾回收之后，就需要把该键值对从哈希表中删除。有了引用队列（ReferenceQueue），就可以方便的获取到这些弱引用对象，将它们从表中删除。在软引用和弱引用对象被添加到队列之前，其对实际对象的引用会被自动清空。通过引用队列的poll/remove方法就可以分别以非阻塞和阻塞的方式获取队列中的引用对象。</li></ul><blockquote><p>OK，讲到这，Java中的引用也就结束了，这篇文章主要就讲了Java中的引用，在其他的语言中也有引用的概念，比如C++中。但我没有对它们进行比较，因为个人觉得没有比较的意义，Java中引用和C++中的引用是两种不同的概念。如果大家实在想了解两者的区别，可以点击下面的第一个链接，看看人家写的，我就懒得写了。。。。</p></blockquote><h4 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h4><ul><li><a href="https://blog.csdn.net/u014082714/article/details/47701519" target="_blank" rel="noopener">https://blog.csdn.net/u014082714/article/details/47701519</a></li><li><a href="http://www.infoq.com/cn/articles/cf-java-garbage-references" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/cf-java-garbage-references</a></li><li><a href="https://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/" target="_blank" rel="noopener">https://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/</a></li><li><a href="https://juejin.im/post/5a72762c6fb9a01cbe65a4eb" target="_blank" rel="noopener">https://juejin.im/post/5a72762c6fb9a01cbe65a4eb</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java中的引用&quot;&gt;&lt;a href=&quot;#java中的引用&quot; class=&quot;headerlink&quot; title=&quot;java中的引用&quot;&gt;&lt;/a&gt;java中的引用&lt;/h2&gt;&lt;p&gt;&amp;emsp;在Java中，引用是一种神奇的东西，通过引用我们可以完成很多事情。习以为常的我们
      
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="引用" scheme="http://yoursite.com/tags/%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 的新特性——使用Stream API来处理集合</title>
    <link href="http://yoursite.com/2018/04/13/java-8-%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8Stream-API%E6%9D%A5%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2018/04/13/java-8-的新特性——使用Stream-API来处理集合/</id>
    <published>2018-04-13T06:44:21.000Z</published>
    <updated>2018-04-13T07:47:14.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是Stream-“流”-？"><a href="#1-什么是Stream-“流”-？" class="headerlink" title="1. 什么是Stream(“流”)？"></a>1. 什么是Stream(“流”)？</h2><p> <strong>官方正解“流”的概念：</strong>流是数据的渠道。流代表了一个对象序列。流操作数据源，如数组或集合。<strong>流本身不存储数据，而只是移动数据</strong>，在移动过程中可能会对数据执行过滤，排序或其他操作。然而一般来说，<strong>流本身不修改数据源(集合，数组，I/O channel， 产生器generator )</strong>对流排序不会修改数据源的排序；相反，对流排序会创建一个新流，其中包含排序后的结果。<br> <strong>通俗理解(浅显)：</strong> Stream 是元素的集合，类似于集合中的迭代器——Iterator，不过是高级版本的迭代器</p><hr><p><strong>理解流是什么</strong><br><img src="http://dl2.iteye.com/upload/attachment/0127/9524/1f361980-f122-3629-a374-7a849e82c5af.png" alt="流是什么"></p><p>从图中我们就可以鲜明的看到流是怎么工作的：</p><ul><li>goods 集合提供了元素序列的数据源，通过 stream() 方法获得 Stream</li><li>filter / sorted / limit 进行数据处理，“连接起来” 构成 “流水线”</li><li>forEach 最终执行</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码示例</span></span><br><span class="line"> goods.stream<span class="comment">()</span>  </span><br><span class="line">    .filter<span class="comment">(c -&gt; c.getPrice()</span> &gt; <span class="number">500</span> &amp;&amp; c.getSales<span class="comment">()</span> &lt; <span class="number">200</span>)  </span><br><span class="line">    .sorted<span class="comment">(Comparator.comparing(Good::getPrice)</span>.reversed<span class="comment">()</span>)  </span><br><span class="line">    .limit<span class="comment">(10)</span>  </span><br><span class="line">    .forEach<span class="comment">(c -&gt; &#123; c.setPrice(c.getPrice()</span> / <span class="number">2</span>); &#125;);</span><br></pre></td></tr></table></figure><p>通过对比集合中的迭代器我们会发现，流的理念更加清晰与透彻，容易理解，工作效率更高。</p><blockquote><p><strong>个人想法：</strong>集合好比是一个储物空间(容器)，什么东西(对象)都可以往里面放，当我们需要的时候就往里面取，怎么取？用标签(索引)去取，OK。那假如我们需要找出里面最特变的那个，或者从中筛选出符合某种特征一类，或者给他们分分类，排排序什么的我们该怎么办？是不是需要一遍遍的去翻找，这就很麻烦。假如我们换一种思路，我们有一个流水线(管道)，在需要对集合中的元素进行操作的时候，我们就把这些元素放到这个流水线上(变成流)，我们需要进行诸如过滤，排序等操作时，只需要在这条流水线上同时操作，那么工作效率将会得到很大的提高。</p></blockquote><blockquote><p><strong>不留误区：</strong>很多时候我们会有这样的误区，既然集合是用来存储对象的，那么流也是用来存储对象的，其实个人认为这种认知是不地道的。流其实是为了方便操作集合中的元素而存在的，流是一种一次性消耗品(就比如岁月如水，过了就是过了)，进行了一次操作，完成了它的使命，自然也就消亡了，所以自始至终数据都还好端端的保存在数据源中(数组或集合中)，这就是为什么说<strong>流本身不修改数据源</strong></p></blockquote><blockquote><p><strong>加深印象</strong></p></blockquote><blockquote><ul><li>不存储数据。 流不是一个存储元素的数据结构。 它只是传递源(source)的数据。</li><li>功能性的(Functional in nature)。 在流上操作只是产生一个结果，不会修改源。 例如filter只是生成一个筛选后的stream，不会删除源里的元素。</li><li>延迟搜索。 许多流操作， 如filter， map等，都是延迟执行。 中间操作总是lazy的。</li><li>Stream可能是无界的。 而集合总是有界的(元素数量是有限大小)。 短路操作如limit(n) ， findFirst()可以在有限的时间内完成在无界的stream</li><li>可消费的(Consumable)。 流的元素在流的声明周期内只能访问一次。 再次访问只能再重新从源中生成一个Stream</li></ul></blockquote><hr><h2 id="2-Java-8-为什么引入-Stream-API"><a href="#2-Java-8-为什么引入-Stream-API" class="headerlink" title="2. Java 8 为什么引入 Stream API"></a>2. Java 8 为什么引入 Stream API</h2><ul><li>在使用集合中的Iterator遍历集合，完成相关聚合应用逻辑操作时效率低下，笨拙</li><li>与lambda表达式结合可以对集合对象进行各种非常便利，高效的聚合操作，或者大批量的数据操作</li><li>提供串行和并发两种聚合操作模式，并发能充分利用多核处理器优势，加速处理过程，利于写出高性能的并发程序。</li></ul><p><strong>Stream是一个函数式语言+多核时代综合影响的产物</strong></p><h2 id="3-什么是聚合操作"><a href="#3-什么是聚合操作" class="headerlink" title="3. 什么是聚合操作"></a>3. 什么是聚合操作</h2><p>或许第一次听说“聚合操作”这个术语时很多人都会觉得陌生，误以为这是一种多么高大上的操作。实际上，“聚合”一直广泛的应用于程序员的开发之中，比如关系型数据库中的一些操作就是“聚合操作”：</p><ul><li>客户每月平均消费金额  ——   平均值</li><li>最昂贵的在售商品     ——  最值</li><li>本周完成的有效订单   ——  去除特殊值</li><li>取十个数据样本作为首页推荐  —— 截取一段数据</li></ul><blockquote><p>典型事例：在关系型数据库中，我们可以使用sql语句的 sum max min avg distinct 等函数实现聚合操作</p></blockquote><p><strong>加深理解：</strong>聚合操作（也称为折叠）是接受一个元素序列为输入，反复使用某个合并操作，把序列中的元素合并成一个汇总的结果。比如查找一个数字列表的总和或者最大值，或者把这些数字累积成一个List对象。Stream接口有一些通用的聚合操作，比如reduce()和collect()；也有一些特定用途的汇聚操作，比如sum(),max()和count()。<strong>注意：sum方法不是所有的Stream对象都有的，只有IntStream、LongStream和DoubleStream是实例才有</strong>。</p><h2 id="4-流的两种操作类型"><a href="#4-流的两种操作类型" class="headerlink" title="4. 流的两种操作类型"></a>4. 流的两种操作类型</h2><h3 id="4-1-了解原理"><a href="#4-1-了解原理" class="headerlink" title="4.1 了解原理"></a>4.1 了解原理</h3><ul><li><strong>Intermediate(中间操作)：</strong>中间操作可以用来执行一系列动作的管道。一个流后面跟随零个或多个中间操作(Intermediate),主要目的是为了打开流，做出某种程度的数据映射(过滤)，然后返回一个新的流，交给下一个操作使用。这类操作是惰性化的(lazy),也就是说，仅仅调用这类方法，并没有真正开始流的遍历。<strong>换句话说，中间操作不是立即发生的，相反，当在中间操作创建的新流上执行完终端操作后，中间操作指定的操作才会发生——这种机制称为延迟行为</strong>，所以中间操作是延迟发生的，延迟行为让流 API 能更加高效地执行。</li><li><strong>Terminal(终端操作):</strong>终端操作会消费流，该操作用于产生结果，例如找出流中的最值。一个流中只能有一个terminal操作，当这个操作执行完成后，流就被消费光了，表示流已经死亡，无法使用。所以终端操作必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果。</li><li><strong>short-circuiting(短路操作):</strong>尽早结束对流的操作，不必检查所有元素<ul><li>对于一个Intermediate操作，接受一个无限大的流(infinite/unbounded)的Stream，返回一个有限的Stream。</li><li>对于一个Terminal操作，接受一个无限大的Stream，但能在有限的时间中计算出结果。</li></ul></li></ul><hr><p><strong>深度剖析，不留遗憾：</strong><br>在中间操作原理讲解中，有一句话标注了黑体。如果我们细心一点的话也许会发现一个问题：终端操作是一个遍历流的过程，意味着流的死亡，那为什么还说中间操作是在其创建的流在执行终端操作后才执行？不是说流被消耗后就不能使用了吗？为什么这种延迟执行反而提高了效率呢？难道这句话有矛盾？其实，这句话是绝对正确的，且听我娓娓道来：</p><ul><li>延迟执行的效率：其实，在原理中解释的已经很清楚了，中间操作是 lazy 的，多个中间操作(诸如排序，过滤等)只会在Terminal操作的时候融合起来，一次循环完成。简单理解为，Stream里有个操作函数的集合，每次中间操作就把转换函数放入到这个集合中，在Terminal操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。（想想生活中的例子，建筑工地施工，是等材料到齐了开工效率高还是来了一部分材料就开工效率高）</li><li>终端操作执行完后执行中间操作：或许理解了延迟执行也就理解了这一点，就不过多赘述了。你只要清楚一点，效率至上，谁先执行，谁后执行，效率说了算。</li></ul><hr><p><strong>代码示例</strong><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">sum</span> = widgets.stream()</span><br><span class="line">.filter(w -&gt; w.getColor() == RED)</span><br><span class="line">.mapToInt(w -&gt; w.getWeight())</span><br><span class="line">.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">stream() 获取当前小物件的 source，filter 和 mapToInt 为 intermediate 操作，进行数据筛选和转换，最后一个 <span class="built_in">sum</span>() 为 terminal 操作，对符合条件的全部小物件作重量求和。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="4-2-两种操作方法分类"><a href="#4-2-两种操作方法分类" class="headerlink" title="4.2 两种操作方法分类"></a>4.2 两种操作方法分类</h3><ul><li><p><strong>Intermediate：</strong><br>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p></li><li><p><strong>Terminal：</strong><br>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p></li><li><p><strong>Short-circuiting:</strong><br>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</p></li></ul><h2 id="5-流的使用"><a href="#5-流的使用" class="headerlink" title="5. 流的使用"></a>5. 流的使用</h2><h3 id="5-1-几个重要的流接口概要"><a href="#5-1-几个重要的流接口概要" class="headerlink" title="5.1 几个重要的流接口概要"></a>5.1 几个重要的流接口概要</h3><p>流 API 的定义的接口包含在 java.util.stream 中。<strong>BaseStream</strong> 是基础接口，它定义了所有流都可以使用的基本功能，声明如下<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="keyword">BaseStream&lt;T, </span>S <span class="keyword">extends </span><span class="keyword">BaseStream&lt;T, </span>S&gt;&gt;</span><br><span class="line">T 指定流元素的类型，S 指定扩展了 <span class="keyword">BaseStream </span>的流的类型。</span><br><span class="line">思考：既然是流，是否需要关闭？</span><br><span class="line">回答：只有当使用的数据源需要关闭时(如流连接到文件)，才需要关闭流。大多数时候，例如数据源是集合或数组时，不需要关闭流。</span><br></pre></td></tr></table></figure></p><p><strong>BaseStream</strong> 下派生出的接口<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.interface</span> Stream&lt;T&gt; <span class="comment">//对象流，使用最为普遍，操作的是对象的引用，本章知识重点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如下几个流是对 BaseStream 的扩展，类似于 Stream，只是操作的是基本类型</span></span><br><span class="line"><span class="number">2</span><span class="selector-class">.interface</span> DoubleStream</span><br><span class="line"><span class="number">3</span><span class="selector-class">.interface</span> IntStream</span><br><span class="line"><span class="number">4</span><span class="selector-class">.interface</span> LongStream</span><br></pre></td></tr></table></figure></p><h3 id="5-2-获取流的几种方式"><a href="#5-2-获取流的几种方式" class="headerlink" title="5.2 获取流的几种方式"></a>5.2 获取流的几种方式</h3><h4 id="5-2-1-从集合获取流"><a href="#5-2-1-从集合获取流" class="headerlink" title="5.2.1 从集合获取流"></a>5.2.1 从集合获取流</h4><p>从集合中获取流是最为普遍的做法：主要 stream() 和 paralleStream()方法<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 Collection 中获取流</span></span><br><span class="line"><span class="built_in">List</span>&lt;People&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;People&gt;();</span><br><span class="line"><span class="built_in">list</span>.add(<span class="literal">new</span> people(<span class="string">"xiaoming"</span>, <span class="number">12</span>));</span><br><span class="line"><span class="built_in">list</span>.add(<span class="literal">new</span> people(<span class="string">"xiaohua"</span>, <span class="number">15</span>));</span><br><span class="line"><span class="built_in">list</span>.add(<span class="literal">new</span> people(<span class="string">"xiaogan"</span>, <span class="number">18</span>));</span><br><span class="line">            ···</span><br><span class="line">stream = <span class="built_in">list</span>.stream();</span><br></pre></td></tr></table></figure></p><h4 id="5-2-2-从数组获取流"><a href="#5-2-2-从数组获取流" class="headerlink" title="5.2.2 从数组获取流"></a>5.2.2 从数组获取流</h4><p>流不但可以从集合获取，还可以直接从数组中获取流，Java 8 为Arrays类添加了 stream() 方法获取流<br>Stream类的静态工厂方法： Stream.of(Object[]), IntStream.range(int, int)， Stream.iterate(Object, UnaryOperator);<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 调用静态的 of()方法 返回指定元素的顺序排序流</span></span><br><span class="line"> <span class="built_in">Stream</span> stream = <span class="built_in">Stream</span>.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 调用 Arrays 类中的 stream() 方法从数组中获取一个顺序流</span></span><br><span class="line"><span class="keyword">String</span>[] strArray = <span class="keyword">new</span> <span class="keyword">String</span>[] &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br><span class="line">stream = <span class="built_in">Stream</span>.of(strArray);</span><br><span class="line">stream = Arrays.stream(strArray);</span><br><span class="line"></span><br><span class="line">IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).forEach(System.out::<span class="built_in">println</span>);</span><br><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::<span class="built_in">println</span>);</span><br><span class="line">IntStream.rangeClosed(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::<span class="built_in">println</span>);</span><br></pre></td></tr></table></figure></p><h4 id="5-2-3-其他获取流的方法-了解"><a href="#5-2-3-其他获取流的方法-了解" class="headerlink" title="5.2.3 其他获取流的方法(了解)"></a>5.2.3 其他获取流的方法(了解)</h4><ul><li>文件行 BufferedReader.lines()</li><li>Files类的获取文件路径列表： find(), lines(), list(), walk()</li><li>Random.ints() 随机数流， 无界的</li><li>BitSet.stream(), Pattern.splitAsStream(java.lang.CharSequence)，JarFile.stream()</li><li>通过StreamSupport辅助类从spliterator产生流</li></ul><h3 id="5-3-流转换为其他数据结构"><a href="#5-3-流转换为其他数据结构" class="headerlink" title="5.3 流转换为其他数据结构"></a>5.3 流转换为其他数据结构</h3><p>我们可以把数组或者集合转换为流，同样的也可以把流转换为数组或者集合。</p><h4 id="5-3-1-将流装换为数组"><a href="#5-3-1-将流装换为数组" class="headerlink" title="5.3.1 将流装换为数组"></a>5.3.1 将流装换为数组</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span>[] strArray = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"asd"</span>, <span class="string">"wer"</span>, <span class="string">"wey"</span>, <span class="string">"ppu"</span>&#125;</span><br><span class="line"><span class="built_in">Stream</span> stream = <span class="built_in">Stream</span>.of(strArray)</span><br><span class="line">        ···</span><br><span class="line"><span class="keyword">String</span>[] strArry1 = stream.toArray(<span class="keyword">String</span>[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="5-3-2-将流转换为集合-收集——collect方法的使用"><a href="#5-3-2-将流转换为集合-收集——collect方法的使用" class="headerlink" title="5.3.2 将流转换为集合(收集——collect方法的使用)"></a>5.3.2 将流转换为集合(收集——collect方法的使用)</h4><p>将流转换为集合的过程称为收集(可以理解为从管道中捞取)，这时我们需要使用一个很重要的方法 collect()，定义如下：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法是Stream中的终端方法，用于返回一个集合(各种集合)</span></span><br><span class="line">&lt;R,A&gt; R collect<span class="comment">(Collector&lt;? super T,A,R&gt; collector)</span></span><br><span class="line">R 指定结果的类型，T 指定调用流的元素类型， A 指定一个可变的累积类型<span class="comment">(一个累积的容器)</span></span><br></pre></td></tr></table></figure></p><p>在Java API中为我们提供了一个 Collectors 工具类，里面提供了关于流操作的一些静态方法，如 toList()，toMap()，toSet()，toCollection() 等将流装换为集合的方法</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String[] </span><span class="keyword">strArray </span>= new <span class="keyword">String[]&#123;"asd", </span><span class="string">"wer"</span>, <span class="string">"wey"</span>, <span class="string">"ppu"</span>&#125;</span><br><span class="line"><span class="keyword">Stream </span><span class="keyword">stream </span>= <span class="keyword">Stream.of(strArray)</span></span><br><span class="line"><span class="keyword"> </span>       ···</span><br><span class="line"><span class="symbol">List</span>&lt;<span class="keyword">String&gt; </span>list1 = <span class="keyword">stream.collect(Collectors.toList());</span></span><br><span class="line"><span class="keyword">List&lt;String&gt; </span>list2 = <span class="keyword">stream.collect(Collectors.toCollection(ArrayList::new));</span></span><br><span class="line"><span class="keyword">Set </span>set1 = <span class="keyword">stream.collect(Collectors.toSet());</span></span><br><span class="line"><span class="keyword">Stack </span>stack1 = <span class="keyword">stream.collect(Collectors.toCollection(Stack::new));</span></span><br></pre></td></tr></table></figure><hr><h4 id="5-3-3-将流转换为字符串"><a href="#5-3-3-将流转换为字符串" class="headerlink" title="5.3.3 将流转换为字符串"></a>5.3.3 将流转换为字符串</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String[] </span><span class="keyword">strArray </span>= new <span class="keyword">String[]&#123;"asd", </span><span class="string">"wer"</span>, <span class="string">"wey"</span>, <span class="string">"ppu"</span>&#125;</span><br><span class="line"><span class="keyword">Stream </span><span class="keyword">stream </span>= <span class="keyword">Stream.of(strArray)</span></span><br><span class="line"><span class="keyword"> </span>       ···</span><br><span class="line"><span class="keyword">String </span><span class="keyword">str </span>= <span class="keyword">stream.collect(Collection.joining()).toString();</span></span><br></pre></td></tr></table></figure><h3 id="5-4-中间操作-转换操作-解析"><a href="#5-4-中间操作-转换操作-解析" class="headerlink" title="5.4 中间操作(转换操作)解析"></a>5.4 中间操作(转换操作)解析</h3><p>中间操作在流的使用中非常频繁，如下是几个常用的转换方法：</p><ul><li><p><strong>filter：</strong>对流中的元素使用给定的过滤函数进行过滤操作，新生成的流中只包含符合条件的元素<br>filter示意图如下：<br><img src="http://img03.taobaocdn.com/imgextra/i3/90219132/T2OxXnXPlXXXXXXXXX_!!90219132.jpg" alt="filter示意图"></p></li><li><p><strong>map():</strong>对流中包含的元素使用给定的转换函数进行转换操作，新生成的流只包含转换生成的元素。该方法有三个变种方法：<strong>mapToInt(),mapToLong(),mapToDouble()</strong><br>map 示意图如下：<br><img src="http://img03.taobaocdn.com/imgextra/i3/90219132/T2PQJnXOJXXXXXXXXX_!!90219132.jpg" alt="map示意图"></p></li><li><p><strong>flatMap():</strong>类似于map()，不过该方法是一对多的替换元素，并将替换的元素平坦的化为新流<br>flatMap示意图如下：<br><img src="http://img01.taobaocdn.com/imgextra/i1/90219132/T2mBXnXQhXXXXXXXXX_!!90219132.jpg" alt="flatMap示意图"></p></li><li><p><strong>distinct:</strong>对流中包含的元素进行去重操作(去除重复的元素)，新生成的流中将没有重复的元素<br>distinct示意图如下：<br><img src="http://img04.taobaocdn.com/imgextra/i4/90219132/T2K0lnXPRXXXXXXXXX_!!90219132.jpg" alt="distinct示意图"></p></li><li><p><strong>peek:</strong>返回由该流的元素组成的流，另外在消耗流中的每个元素时执行提供的操作。该方法主要用于调试使用<br>peek示意图如下：<br><img src="http://img03.taobaocdn.com/imgextra/i3/90219132/T2DrFmXHtaXXXXXXXX_!!90219132.jpg" alt="peek示意图"></p></li></ul><hr><p><strong>代码示例</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Stream</span>.of(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>) .filter(e -&gt; e.length() &gt; <span class="number">3</span>) .<span class="built_in">peek</span>(e -&gt; System.out.<span class="built_in">println</span>(<span class="string">"Filtered value: "</span> + e)) .<span class="built_in">map</span>(<span class="keyword">String</span>::toUpperCase) .<span class="built_in">peek</span>(e -&gt; System.out.<span class="built_in">println</span>(<span class="string">"Mapped value: "</span> + e)) .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><hr><ul><li><p><strong>limit:</strong>对流进行截断操作，获取流中的前N个元素，如果流中的元素个数小于N，则获取所有的元素<br>limit示意图如下：<br><img src="http://img02.taobaocdn.com/imgextra/i2/90219132/T2QAXlXJBaXXXXXXXX_!!90219132.jpg" alt="limit示意图"></p></li><li><p><strong>skip:</strong>与limit的效果相反。返回一个丢弃原Stream的前N个元素后剩下元素所组成的新流，如果原Stream中包含的元素个数小于N，那么返回一个空Stream<br>skip示意图如下：<br><img src="http://img04.taobaocdn.com/imgextra/i4/90219132/T24A8mXUJXXXXXXXXX_!!90219132.jpg" alt="skip示意图"></p></li></ul><hr><p><strong>代码示例</strong>(综合了上面的方法)<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = new ArrayList&lt;&gt;();</span><br><span class="line">          nums.<span class="builtin-name">add</span>(1);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(<span class="literal">null</span>);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(2);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(1); </span><br><span class="line">          nums.<span class="builtin-name">add</span>(4);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(3);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(<span class="literal">null</span>);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(5);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(6);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(7);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(8);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(9);</span><br><span class="line"></span><br><span class="line">          System.out.println(<span class="string">"sums is : "</span> + nums.stream().filter(num -&gt; num != <span class="literal">null</span>).distinct()</span><br><span class="line">                  .mapToInt(num -&gt; num * 2).</span><br><span class="line">                          peek(System.out::println).skip(2).limit(4).sum());</span><br></pre></td></tr></table></figure></p><hr><h3 id="5-5-终止-汇聚-操作解析"><a href="#5-5-终止-汇聚-操作解析" class="headerlink" title="5.5 终止(汇聚)操作解析"></a>5.5 终止(汇聚)操作解析</h3><ul><li><p><strong>anyMatch / allMatch / noneMatch</strong><br>allMatch：Stream 中全部元素符合传入的 predicate，返回 true<br>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true<br>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; persons = new ArrayList();</span><br><span class="line">persons.add(new Person(<span class="number">1</span>, <span class="string">"name"</span> + <span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">persons.add(new Person(<span class="number">2</span>, <span class="string">"name"</span> + <span class="number">2</span>, <span class="number">21</span>));</span><br><span class="line">persons.add(new Person(<span class="number">3</span>, <span class="string">"name"</span> + <span class="number">3</span>, <span class="number">34</span>));</span><br><span class="line">persons.add(new Person(<span class="number">4</span>, <span class="string">"name"</span> + <span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line">persons.add(new Person(<span class="number">5</span>, <span class="string">"name"</span> + <span class="number">5</span>, <span class="number">55</span>));</span><br><span class="line">boolean isAllAdult = persons.stream().</span><br><span class="line"> allMatch(p -&gt; p.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">System.out.println(<span class="string">"All are adult? "</span> + isAllAdult);</span><br><span class="line">boolean isThereAnyChild = persons.stream().</span><br><span class="line"> anyMatch(p -&gt; p.getAge() &lt; <span class="number">12</span>);</span><br><span class="line">System.out.println(<span class="string">"Any child? "</span> + isThereAnyChild);</span><br></pre></td></tr></table></figure></li><li><p><strong>count / min / max</strong><br>count：得到元素的数量<br>max：取得元素中的最大值<br>min：取得元素中的最小值</p></li><li><p><strong>findAny / findFirst /forEach</strong><br>findAny：返回流中的任意一个元素<br>findFirst：返回流中的第一个元素<br>forEach：遍历流</p></li></ul><h3 id="5-6-使用流的基本步骤"><a href="#5-6-使用流的基本步骤" class="headerlink" title="5.6 使用流的基本步骤"></a>5.6 使用流的基本步骤</h3><p>也许听了上面关于中间操作，终端操作会有点懵，在自己写代码的时候可能感觉无从下手，或许你就可以按照下面的步骤了</p><ul><li>创建流(Stream)</li><li>中间操作(转换Stream)，每次转换原有的Stream对象不变，返回一个新的Stream对象</li><li>终端操作,获取结果</li></ul><p>Stream通用语法剖析示意图：<br><img src="http://img04.taobaocdn.com/imgextra/i4/90219132/T2ycFgXQ8XXXXXXXXX_!!90219132.jpg" alt="Stream通用语法剖析示意图"></p><h3 id="5-7-流的迭代器"><a href="#5-7-流的迭代器" class="headerlink" title="5.7 流的迭代器"></a>5.7 流的迭代器</h3><p>虽然流不是数据存储对象，但是仍然可以使用迭代器来遍历元素，就如同使用迭代器遍历集合中的元素一样。流 API 支持两类迭代器，一类是传统的 Iterator，另一类是 JDK 8新增的 Spliterator.</p><ul><li><strong>使用Iterator</strong><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">String</span>&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"sdk"</span>);</span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"ffg"</span>);</span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"kko"</span>); </span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"mmp"</span>);</span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"kkl"</span>);</span><br><span class="line">         </span><br><span class="line">         Stream&lt;<span class="keyword">String</span>&gt; myStream = nums.stream();</span><br><span class="line">         </span><br><span class="line">         Iterator&lt;<span class="keyword">String</span>&gt; itr = myStream.iterator();</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">while</span>(itr.hasNext())&#123;</span><br><span class="line">           System.out.<span class="built_in">println</span>(itr.next());</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>使用 Spliterator :</strong>可以替代 Iterator，在涉及并行处理时更加方便。<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">          nums.add(<span class="string">"sdk"</span>);</span><br><span class="line">          nums.add(<span class="string">"ffg"</span>);</span><br><span class="line">          nums.add(<span class="string">"kko"</span>); </span><br><span class="line">          nums.add(<span class="string">"mmp"</span>);</span><br><span class="line">          nums.add(<span class="string">"kkl"</span>);</span><br><span class="line">          </span><br><span class="line">          Stream&lt;String&gt; myStream = nums.stream();</span><br><span class="line">          </span><br><span class="line">          Spliterator&lt;String&gt; splitItr = myStream.spliterator();</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">while</span><span class="function"><span class="params">(splitItr.tryAdvance((n) -&gt; Syatem.out.println(n)))</span>;</span></span><br><span class="line"><span class="function">          <span class="title">splitItr</span>.<span class="title">forEachRemain</span><span class="params">((n) -&gt; Syatem.out.println(n))</span>)</span></span><br><span class="line"><span class="function">          </span></span><br><span class="line"><span class="function">          关于<span class="title">tryAdvance</span></span></span><br><span class="line"><span class="function">          定义：<span class="title">boolean</span> <span class="title">tryAdvance</span><span class="params">(Comsumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span></span><br><span class="line"><span class="function">          <span class="title">action</span> 指代了在迭代器中的下一个元素上执行的操作。如果有下一个元素，<span class="title">tryAdvance</span><span class="params">()</span>返回<span class="title">true</span>，否则返回<span class="title">false</span>。</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>参考书籍</strong><br>疯狂Java讲义<br>Java 8编程参考官方教程</p><p><strong>参考文档</strong><br><a href="http://www.importnew.com/20331.html" target="_blank" rel="noopener">http://www.importnew.com/20331.html</a><br><a href="http://www.importnew.com/16545.html" target="_blank" rel="noopener">http://www.importnew.com/16545.html</a><br><a href="http://www.iteye.com/news/32782" target="_blank" rel="noopener">http://www.iteye.com/news/32782</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是Stream-“流”-？&quot;&gt;&lt;a href=&quot;#1-什么是Stream-“流”-？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是Stream(“流”)？&quot;&gt;&lt;/a&gt;1. 什么是Stream(“流”)？&lt;/h2&gt;&lt;p&gt; &lt;strong&gt;官方正解“流”的概念：&lt;/strong&gt;流是数据的渠道。流代表了一个对象序列。流操作数据源，如数组或集合。&lt;strong&gt;流本身不存储数据，而只是移动数据&lt;/strong&gt;，在移动过程中可能会对数据执行过滤，排序或其他操作。然而一般来说，&lt;strong&gt;流本身不修改数据源(集合，数组，I/O channel， 产生器generator )&lt;/strong&gt;对流排序不会修改数据源的排序；相反，对流排序会创建一个新流，其中包含排序后的结果。&lt;br&gt; &lt;strong&gt;通俗理解(浅显)：&lt;/strong&gt; Stream 是元素的集合，类似于集合中的迭代器——Iterator，不过是高级版本的迭代器&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;理解流是什么&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://dl2.iteye.com/upload/attachment/0127/9524/1f361980-f122-3629-a374-7a849e82c5af.png&quot; alt=&quot;流是什么&quot;&gt;&lt;/p&gt;
&lt;p&gt;从图中我们就可以鲜明的看到流是怎么工作的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;goods 集合提供了元素序列的数据源，通过 stream() 方法获得 Stream&lt;/li&gt;
&lt;li&gt;filter / sorted / limit 进行数据处理，“连接起来” 构成 “流水线”&lt;/li&gt;
&lt;li&gt;forEach 最终执行&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//代码示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; goods.stream&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .filter&lt;span class=&quot;comment&quot;&gt;(c -&amp;gt; c.getPrice()&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt; &amp;amp;&amp;amp; c.getSales&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .sorted&lt;span class=&quot;comment&quot;&gt;(Comparator.comparing(Good::getPrice)&lt;/span&gt;.reversed&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .limit&lt;span class=&quot;comment&quot;&gt;(10)&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .forEach&lt;span class=&quot;comment&quot;&gt;(c -&amp;gt; &amp;#123; c.setPrice(c.getPrice()&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过对比集合中的迭代器我们会发现，流的理念更加清晰与透彻，容易理解，工作效率更高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;个人想法：&lt;/strong&gt;集合好比是一个储物空间(容器)，什么东西(对象)都可以往里面放，当我们需要的时候就往里面取，怎么取？用标签(索引)去取，OK。那假如我们需要找出里面最特变的那个，或者从中筛选出符合某种特征一类，或者给他们分分类，排排序什么的我们该怎么办？是不是需要一遍遍的去翻找，这就很麻烦。假如我们换一种思路，我们有一个流水线(管道)，在需要对集合中的元素进行操作的时候，我们就把这些元素放到这个流水线上(变成流)，我们需要进行诸如过滤，排序等操作时，只需要在这条流水线上同时操作，那么工作效率将会得到很大的提高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不留误区：&lt;/strong&gt;很多时候我们会有这样的误区，既然集合是用来存储对象的，那么流也是用来存储对象的，其实个人认为这种认知是不地道的。流其实是为了方便操作集合中的元素而存在的，流是一种一次性消耗品(就比如岁月如水，过了就是过了)，进行了一次操作，完成了它的使命，自然也就消亡了，所以自始至终数据都还好端端的保存在数据源中(数组或集合中)，这就是为什么说&lt;strong&gt;流本身不修改数据源&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;加深印象&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不存储数据。 流不是一个存储元素的数据结构。 它只是传递源(source)的数据。&lt;/li&gt;
&lt;li&gt;功能性的(Functional in nature)。 在流上操作只是产生一个结果，不会修改源。 例如filter只是生成一个筛选后的stream，不会删除源里的元素。&lt;/li&gt;
&lt;li&gt;延迟搜索。 许多流操作， 如filter， map等，都是延迟执行。 中间操作总是lazy的。&lt;/li&gt;
&lt;li&gt;Stream可能是无界的。 而集合总是有界的(元素数量是有限大小)。 短路操作如limit(n) ， findFirst()可以在有限的时间内完成在无界的stream&lt;/li&gt;
&lt;li&gt;可消费的(Consumable)。 流的元素在流的声明周期内只能访问一次。 再次访问只能再重新从源中生成一个Stream&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-Java-8-为什么引入-Stream-API&quot;&gt;&lt;a href=&quot;#2-Java-8-为什么引入-Stream-API&quot; class=&quot;headerlink&quot; title=&quot;2. Java 8 为什么引入 Stream API&quot;&gt;&lt;/a&gt;2. Java 8 为什么引入 Stream API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在使用集合中的Iterator遍历集合，完成相关聚合应用逻辑操作时效率低下，笨拙&lt;/li&gt;
&lt;li&gt;与lambda表达式结合可以对集合对象进行各种非常便利，高效的聚合操作，或者大批量的数据操作&lt;/li&gt;
&lt;li&gt;提供串行和并发两种聚合操作模式，并发能充分利用多核处理器优势，加速处理过程，利于写出高性能的并发程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Stream是一个函数式语言+多核时代综合影响的产物&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-什么是聚合操作&quot;&gt;&lt;a href=&quot;#3-什么是聚合操作&quot; class=&quot;headerlink&quot; title=&quot;3. 什么是聚合操作&quot;&gt;&lt;/a&gt;3. 什么是聚合操作&lt;/h2&gt;&lt;p&gt;或许第一次听说“聚合操作”这个术语时很多人都会觉得陌生，误以为这是一种多么高大上的操作。实际上，“聚合”一直广泛的应用于程序员的开发之中，比如关系型数据库中的一些操作就是“聚合操作”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户每月平均消费金额  ——   平均值&lt;/li&gt;
&lt;li&gt;最昂贵的在售商品     ——  最值&lt;/li&gt;
&lt;li&gt;本周完成的有效订单   ——  去除特殊值&lt;/li&gt;
&lt;li&gt;取十个数据样本作为首页推荐  —— 截取一段数据&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;典型事例：在关系型数据库中，我们可以使用sql语句的 sum max min avg distinct 等函数实现聚合操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;加深理解：&lt;/strong&gt;聚合操作（也称为折叠）是接受一个元素序列为输入，反复使用某个合并操作，把序列中的元素合并成一个汇总的结果。比如查找一个数字列表的总和或者最大值，或者把这些数字累积成一个List对象。Stream接口有一些通用的聚合操作，比如reduce()和collect()；也有一些特定用途的汇聚操作，比如sum(),max()和count()。&lt;strong&gt;注意：sum方法不是所有的Stream对象都有的，只有IntStream、LongStream和DoubleStream是实例才有&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;4-流的两种操作类型&quot;&gt;&lt;a href=&quot;#4-流的两种操作类型&quot; class=&quot;headerlink&quot; title=&quot;4. 流的两种操作类型&quot;&gt;&lt;/a&gt;4. 流的两种操作类型&lt;/h2&gt;&lt;h3 id=&quot;4-1-了解原理&quot;&gt;&lt;a href=&quot;#4-1-了解原理&quot; class=&quot;headerlink&quot; title=&quot;4.1 了解原理&quot;&gt;&lt;/a&gt;4.1 了解原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intermediate(中间操作)：&lt;/strong&gt;中间操作可以用来执行一系列动作的管道。一个流后面跟随零个或多个中间操作(Intermediate),主要目的是为了打开流，做出某种程度的数据映射(过滤)，然后返回一个新的流，交给下一个操作使用。这类操作是惰性化的(lazy),也就是说，仅仅调用这类方法，并没有真正开始流的遍历。&lt;strong&gt;换句话说，中间操作不是立即发生的，相反，当在中间操作创建的新流上执行完终端操作后，中间操作指定的操作才会发生——这种机制称为延迟行为&lt;/strong&gt;，所以中间操作是延迟发生的，延迟行为让流 API 能更加高效地执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terminal(终端操作):&lt;/strong&gt;终端操作会消费流，该操作用于产生结果，例如找出流中的最值。一个流中只能有一个terminal操作，当这个操作执行完成后，流就被消费光了，表示流已经死亡，无法使用。所以终端操作必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;short-circuiting(短路操作):&lt;/strong&gt;尽早结束对流的操作，不必检查所有元素&lt;ul&gt;
&lt;li&gt;对于一个Intermediate操作，接受一个无限大的流(infinite/unbounded)的Stream，返回一个有限的Stream。&lt;/li&gt;
&lt;li&gt;对于一个Terminal操作，接受一个无限大的Stream，但能在有限的时间中计算出结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;深度剖析，不留遗憾：&lt;/strong&gt;&lt;br&gt;在中间操作原理讲解中，有一句话标注了黑体。如果我们细心一点的话也许会发现一个问题：终端操作是一个遍历流的过程，意味着流的死亡，那为什么还说中间操作是在其创建的流在执行终端操作后才执行？不是说流被消耗后就不能使用了吗？为什么这种延迟执行反而提高了效率呢？难道这句话有矛盾？其实，这句话是绝对正确的，且听我娓娓道来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;延迟执行的效率：其实，在原理中解释的已经很清楚了，中间操作是 lazy 的，多个中间操作(诸如排序，过滤等)只会在Terminal操作的时候融合起来，一次循环完成。简单理解为，Stream里有个操作函数的集合，每次中间操作就把转换函数放入到这个集合中，在Terminal操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。（想想生活中的例子，建筑工地施工，是等材料到齐了开工效率高还是来了一部分材料就开工效率高）&lt;/li&gt;
&lt;li&gt;终端操作执行完后执行中间操作：或许理解了延迟执行也就理解了这一点，就不过多赘述了。你只要清楚一点，效率至上，谁先执行，谁后执行，效率说了算。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;代码示例&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight coq&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int &lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt; = widgets.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.filter(w -&amp;gt; w.getColor() == RED)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.mapToInt(w -&amp;gt; w.getWeight())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stream() 获取当前小物件的 source，filter 和 mapToInt 为 intermediate 操作，进行数据筛选和转换，最后一个 &lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt;() 为 terminal 操作，对符合条件的全部小物件作重量求和。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java 8 新特性" scheme="http://yoursite.com/tags/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
</feed>
