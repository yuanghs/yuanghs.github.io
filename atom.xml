<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雅客</title>
  <icon>https://www.gravatar.com/avatar/438cbd1eb014114334d46324817bc1d9</icon>
  <subtitle>往事随风</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-16T01:02:24.227Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>雅客</name>
    <email>1502841998@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>说说UML</title>
    <link href="http://yoursite.com/2018/04/15/%E8%AF%B4%E8%AF%B4UML/"/>
    <id>http://yoursite.com/2018/04/15/说说UML/</id>
    <published>2018-04-15T15:09:07.000Z</published>
    <updated>2018-04-16T01:02:24.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UML——继承"><a href="#UML——继承" class="headerlink" title="UML——继承"></a>UML——继承</h3><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E7%BB%A7%E6%89%BFUML.JPG" alt=""></p><h3 id="UML——实现"><a href="#UML——实现" class="headerlink" title="UML——实现"></a>UML——实现</h3><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E5%AE%9E%E7%8E%B0UML.JPG" alt=""></p><h3 id="UML——聚合"><a href="#UML——聚合" class="headerlink" title="UML——聚合"></a>UML——聚合</h3><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E8%81%9A%E5%90%88UML.JPG" alt=""></p><blockquote><p>聚合表示持有对象，是一种一对多的关系，比如图中的Basket中定义了一个Fruits的数组，表示可以持有Fruit的多个对象</p></blockquote><h4 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h4><ul><li><a href="https://blog.csdn.net/qq_31655965/article/details/54645220" target="_blank" rel="noopener">https://blog.csdn.net/qq_31655965/article/details/54645220</a></li><li><a href="https://www.cnblogs.com/scevecn/p/5663369.html" target="_blank" rel="noopener">https://www.cnblogs.com/scevecn/p/5663369.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;UML——继承&quot;&gt;&lt;a href=&quot;#UML——继承&quot; class=&quot;headerlink&quot; title=&quot;UML——继承&quot;&gt;&lt;/a&gt;UML——继承&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yuangh
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="UML" scheme="http://yoursite.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>Java中的引用</title>
    <link href="http://yoursite.com/2018/04/13/Java%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/13/Java中的引用/</id>
    <published>2018-04-13T15:47:41.000Z</published>
    <updated>2018-04-15T11:22:39.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java中的引用"><a href="#java中的引用" class="headerlink" title="java中的引用"></a>java中的引用</h2><p>&emsp;在Java中，引用是一种神奇的东西，通过引用我们可以完成很多事情。习以为常的我们往往忽略了一些本质的东西。我们浅显的以为引用无非就是用于对象调用的，真的是这样吗？你真正了解了Java中的引用了吗？让我们透过现象看本质，去了解一些更深的东西。在讨论引用之前，我们先聊聊对象这种东西。</p><h4 id="对象——一个神奇的物种-我无所不能"><a href="#对象——一个神奇的物种-我无所不能" class="headerlink" title="对象——一个神奇的物种(我无所不能)"></a>对象——一个神奇的物种(我无所不能)</h4><p><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E5%AF%B9%E8%B1%A1.JPG" alt=""></p><p>&emsp;看了这张图也许大家都对对象这玩意儿有了很深刻的印象了，以前一直问对象是什么，对象长什么样，好吧，我告诉大家，对象就长这样（哈哈哈哈。。。。此处省略一万字）。为什么说对象是一个很神奇的物种，就我自己的理解，给出如下解释：</p><ul><li>封装的完美性：对象是一个实实在在的个体(在堆中有自己的空间)，就如同我们一个完整的人一样，都在这大千世界占据着一个空间。一个对象的生成和一个人诞生很相似，都要经过一个异常复杂的过程。人需要十月怀胎，而一个对象从Java虚拟机接到命令(new : 喂，生一个对象出来)到创建一个对象出来需要经历很大周折，有的需要“千万年”，有的需要“几亿年”，有的可能直接挂掉(想想人家CPU的时间周期，我们的1秒就是人家的百亿年了。。。)。怎么样，对象的创建是不是很不容易，所以创建对象一定要慎重(反射技术就能提前对对象进行剖腹产，很多框架都使用了这种技术，其中Spring中的依赖注入(DI)就是对这种技术的深刻运用。。。)。好了，扯皮了半天，知道了对象是咋来的，该说说为啥说封住的完美了，其实还是类比我们人一样，对象头就好比人的头一样，人要靠五官观四方，听八方，对象也需要他存储的一些比如哈希码，指向类元素的指针等来定位一个对象等等，实例数据区就如同我们的身体四肢，大家可以脑补我们可以干什么。就是由于这种近乎偏执严谨完美的封装，才能让对象在Java世界里徜徉，无所不能。</li><li>关于对象无所不能的特性，我就不多赘述了，随着学习的深入，大家会慢慢发现，没有对象干不了的事，或许我该这样表达，我们下意识的都会想着用对象去干些什么，也许这就是Java设计的初衷——万物皆对象。</li></ul><hr><p>好了，扯了这么半天，也该说说引用是啥玩意了，在具体的说引用之前，还是放两张图，暖暖肠胃。<br>下面是访问对象的两种方式，也是指针最直观的运用。</p><ul><li>使用句柄访问<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/master/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9A%E4%BD%8D1.JPG" alt=""></li></ul><blockquote><p>使用句柄访问，Java堆中会划分出一块内存来作为句柄池，而reference中存储的就是句柄的地址，句柄包含了对象实例数据与类型数据各自的具体地址信息。</p><ul><li>优势：reference中存储的是稳定的句柄地址，在对象被移动时(比如Java虚拟机在执行垃圾回收时就经常移动对象)时只会改变实例数据指针，而reference本身不需要修改。</li><li>劣势：时间太慢，相比于直接指针访问，多了一次定位开销。</li></ul></blockquote><ul><li>直接指针访问<br><img src="https://raw.githubusercontent.com/yuanghs/pictures/008c851269e091cd45301c2138e2494a15ba39d5/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9A%E4%BD%8D2.JPG" alt=""></li></ul><blockquote><p>使用直接指针访问：reference直接指向Java堆中的实例数据，reference中存储的直接是对象的地址。和第一种对比，优劣可自行观之。</p></blockquote><p>&emsp;这里也简单说一下为什么会有这两种定位方式：Java程序需要通过栈上的reference来操作堆上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位，访问堆中对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。</p><h3 id="引用是啥玩意儿"><a href="#引用是啥玩意儿" class="headerlink" title="引用是啥玩意儿"></a>引用是啥玩意儿</h3><p>&emsp;在Java学习的基础阶段，我们对引用的概念只停留在初级阶段：也就是引用代表一个对象，或者引用中存放着对象在堆内存中的地址，通过引用可以找到这个对象，并操作对象上的实例数据。这种理解本没有错，不过只是停留在比较浅显的层次。其实，从更深的角度去理解，引用在Java中有着举足轻重的地位。</p><p>&emsp;以前我们在学习C, C++的时候，对于开辟一段内存是一件颇为麻烦的事情，我们动态申请了一段内存，就需要在适当的位置把他free或者delete掉，否则就会出现很多溢出等问题，这就需要程序员更多的去关注内存问题，小心的检查每一份开辟的内存是否关闭，在哪个地方关闭，想想就很痛苦。Java是面向对象的语言，对象的产生就是内存的开辟，这就意味着内存的申请是频繁发生的，在Java中，一个new关键字就代表了一块内存的申请。我们平时new一个对象出来很舒服，而且也不用关心这个对象的内存在什么时候释放，只要尽管用就行了，那我们是否想过，why？</p><p>&emsp;其实这与Java虚拟机的垃圾回收机制有关，垃圾回收机制会帮我们自动的清理一些无用的对象，保存有用的对象，关于垃圾回收机制是很么，垃圾回收算法有哪些，在这里将不多赘述，有兴趣的可以等待我的后续更新。言归正传，说了这么半天，其实大家也应该猜到了，引用与对象的回收有着非常密切的关系，可以说，正是有了引用这玩意儿，垃圾回收才能如此给力(在这里小小的提一下：判断对象是否存活的两种算法——引用计数算法和可达性分析算法)。OK了，说了这么半天引用的厉害之处，也该好好说说什么是引用了。</p><p>&emsp;在JDK1.2之前，Java中引用的传统定义如下：如果Reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。（估计很多人的理解也就到这了……）在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为了四种，分别是：强引用(Strong Reference), 软引用(SoftReference), 弱引用(WeakReference), 虚引用(PhantomReference), 这四种引用强度依次逐渐减弱。下面分别举例介绍这四种引用：</p><ul><li><p>强引用(StrongReference): 强引用是最常见的一种引用，在Java中百分之九十九的都是常引用，通常用new关键字new出来的对象都指向一个强引用。例如Object object = new Object()，object就是new Object()这个对象的强引用，我们知道在Java中，对象是可以被多个引用指向的，只要有一个强引用还在，垃圾收集器永远不会回收掉被引用的对象。</p></li><li><p>软引用(SoftReference): 软引用是用来描述一些还有用但非必须的对象，强度上弱于强引用，在java.lang.ref包下的SoftReference类维护者软引用。它的作用是告诉垃圾回收器，程序中哪些对象是不那么重要的，在内存空间充足时可以被保留，而在内存空间不足时将会被暂时回收。软引用非常适合创建缓存，在系统内存不足时，缓存将会被释放。</p></li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">如下就是Java软引用的一个简单示例</span><br><span class="line"></span><br><span class="line"><span class="comment">//person强引用</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.out.println(person);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将person这个强引用包装成弱引用</span></span><br><span class="line">Reference&lt;Person&gt; reference = <span class="keyword">new</span> SoftReference&lt;Person&gt;(person);</span><br><span class="line"></span><br><span class="line"><span class="comment">//强引用为空，只剩下弱引用</span></span><br><span class="line">person = <span class="built_in">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.gc();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用get()方法来获取软引用所指向的对象</span></span><br><span class="line"><span class="keyword">System</span>.out.println(reference.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">com.reference.Person<span class="comment">@7852e922</span></span><br><span class="line"><span class="comment">com.reference.Person@</span><span class="number">7852e922</span></span><br></pre></td></tr></table></figure><ul><li><strong>弱引用(WeakReference):</strong> 弱引用也是用来描述非必须对象的，强度上弱于软引用，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。在java.lang.ref包下的WeakReference类维护着弱引用。弱引用的作用在于解决强引用所带来的对象之间在存活时间上的耦合关系，最常见的用途在于集合类中，特别是哈希表中(典型的是HashMap)。哈希表的接口允许使用任何Java对象作为键来使用。当一个键值对被放入到哈希表中之后，哈希表对象本身就有了对这些键和值对象的引用。如果这种引用是强引用的话，那么只要哈希表对象本身还存活，其中所包含的键和值对象是不会被回收的。如果某个存活时间很长的哈希表中包含的键值对很多，最终就有可能消耗掉JVM中全部的内存。对于这种情况就使用弱引用来引用这些对象，这样哈希表中的键和值对象都能被垃圾回收。</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> <span class="type">Integer</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Integer, Person&gt; w = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将i这个强引用包装成弱引用</span></span><br><span class="line">WeakReference&lt;Integer&gt; <span class="keyword">in</span> = <span class="keyword">new</span> <span class="type">WeakReference</span>&lt;&gt;(i);</span><br><span class="line"></span><br><span class="line">i = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将包装后的引用放入HashMap中</span></span><br><span class="line">i = <span class="keyword">in</span>.<span class="keyword">get</span>();    </span><br><span class="line">w.put(i, <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"xx"</span>, <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Before gc:"</span> + <span class="keyword">in</span>.<span class="keyword">get</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启垃圾回收    </span></span><br><span class="line">System.gc();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"After gc:"</span> + <span class="keyword">in</span>.<span class="keyword">get</span>());</span><br><span class="line"></span><br><span class="line">结果：Before gc:<span class="type">1</span></span><br><span class="line"><span class="type">     After gc</span>:<span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Java中WeakHashMap就可以避免上面所说的情况，它会自动将键值包装为弱引用类型</span></span><br><span class="line"></span><br><span class="line">WeakHashMap&lt;Integer, Person&gt; weak = <span class="keyword">new</span> <span class="type">WeakHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><ul><li>虚引用(PhantomReference): 虚引用也成幽灵引用或幻影引用，是最弱的一种引用关系。一个对象是否有虚引用存在，完全不会对其生命周期构成影响，也无法通过一个虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在java.lang.ref包下的PhantomReference维护着虚引用。<blockquote><p>其实虚引用是一个很偏的知识，与Java的对象终止化机制有关。大家可以去了解，在Java中有一个finalize方法，设计初衷就是一个对象在真正被回收前，执行一些清理的工作(就如同C++中的析构函数)。但是垃圾回收的运行时间是不用固定的，所以清理工作也不是提前预知的。而虚引用就可以解决这个问题，在创建一个虚引用的时候必须指定一个引用队列。当一个对象的finalize方法被调用了之后，这个对象的虚引用就会被加入到队列中，通过检查该队列中的内容就可以知道一个对象是不是准备要被回收了。</p></blockquote></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓冲区代码实现展示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PhantomBuffer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">private</span> ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt;();</span><br><span class="line">    <span class="keyword">private</span> PhantomReference&lt;<span class="keyword">byte</span>[]&gt; <span class="keyword">ref</span> = <span class="keyword">new</span> PhantomReference&lt;<span class="keyword">byte</span>[]&gt;(data, queue);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">get</span>(<span class="params"><span class="keyword">int</span> size</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Wrong buffer size"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (data.length &lt; size) &#123;</span><br><span class="line">            data = <span class="literal">null</span>;</span><br><span class="line">            System.gc(); <span class="comment">//强制运行垃圾回收器</span></span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                queue.<span class="keyword">remove</span>(); <span class="comment">//该方法会阻塞直到队列非空</span></span><br><span class="line">                <span class="keyword">ref</span>.clear(); <span class="comment">//幽灵引用不会自动清空，要手动运行</span></span><br><span class="line">                <span class="keyword">ref</span> = <span class="literal">null</span>;</span><br><span class="line">                data = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</span><br><span class="line">                <span class="keyword">ref</span> = <span class="keyword">new</span> PhantomReference&lt;<span class="keyword">byte</span>[]&gt;(data, queue);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">解释：每次申请新的缓冲区时，都要确保之前缓冲区的字节数组已经被成功回收。引用队列中的<span class="keyword">remove</span>()方法会阻塞直到新的虚引用被加入到队列中。</span><br></pre></td></tr></table></figure><ul><li><strong>引用队列(ReferenceQueue)：</strong> 在有些情况下，程序会需要在一个对象的可达到性发生变化的时候得到通知。比如某个对象的强引用都已经不存在了，只剩下软引用或是弱引用。但是还需要对引用本身做一些其他的处理。典型的情景是在哈希表中。引用对象是作为WeakHashMap中的键对象的，当其引用的实际对象被垃圾回收之后，就需要把该键值对从哈希表中删除。有了引用队列（ReferenceQueue），就可以方便的获取到这些弱引用对象，将它们从表中删除。在软引用和弱引用对象被添加到队列之前，其对实际对象的引用会被自动清空。通过引用队列的poll/remove方法就可以分别以非阻塞和阻塞的方式获取队列中的引用对象。</li></ul><blockquote><p>OK，讲到这，Java中的引用也就结束了，这篇文章主要就讲了Java中的引用，在其他的语言中也有引用的概念，比如C++中。但我没有对它们进行比较，因为个人觉得没有比较的意义，Java中引用和C++中的引用是两种不同的概念。如果大家实在想了解两者的区别，可以点击下面的第一个链接，看看人家写的，我就懒得写了。。。。</p></blockquote><h4 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h4><ul><li><a href="https://blog.csdn.net/u014082714/article/details/47701519" target="_blank" rel="noopener">https://blog.csdn.net/u014082714/article/details/47701519</a></li><li><a href="http://www.infoq.com/cn/articles/cf-java-garbage-references" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/cf-java-garbage-references</a></li><li><a href="https://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/" target="_blank" rel="noopener">https://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/</a></li><li><a href="https://juejin.im/post/5a72762c6fb9a01cbe65a4eb" target="_blank" rel="noopener">https://juejin.im/post/5a72762c6fb9a01cbe65a4eb</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java中的引用&quot;&gt;&lt;a href=&quot;#java中的引用&quot; class=&quot;headerlink&quot; title=&quot;java中的引用&quot;&gt;&lt;/a&gt;java中的引用&lt;/h2&gt;&lt;p&gt;&amp;emsp;在Java中，引用是一种神奇的东西，通过引用我们可以完成很多事情。习以为常的我们
      
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="引用" scheme="http://yoursite.com/tags/%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 的新特性——使用Stream API来处理集合</title>
    <link href="http://yoursite.com/2018/04/13/java-8-%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8Stream-API%E6%9D%A5%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2018/04/13/java-8-的新特性——使用Stream-API来处理集合/</id>
    <published>2018-04-13T06:44:21.000Z</published>
    <updated>2018-04-13T07:47:14.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是Stream-“流”-？"><a href="#1-什么是Stream-“流”-？" class="headerlink" title="1. 什么是Stream(“流”)？"></a>1. 什么是Stream(“流”)？</h2><p> <strong>官方正解“流”的概念：</strong>流是数据的渠道。流代表了一个对象序列。流操作数据源，如数组或集合。<strong>流本身不存储数据，而只是移动数据</strong>，在移动过程中可能会对数据执行过滤，排序或其他操作。然而一般来说，<strong>流本身不修改数据源(集合，数组，I/O channel， 产生器generator )</strong>对流排序不会修改数据源的排序；相反，对流排序会创建一个新流，其中包含排序后的结果。<br> <strong>通俗理解(浅显)：</strong> Stream 是元素的集合，类似于集合中的迭代器——Iterator，不过是高级版本的迭代器</p><hr><p><strong>理解流是什么</strong><br><img src="http://dl2.iteye.com/upload/attachment/0127/9524/1f361980-f122-3629-a374-7a849e82c5af.png" alt="流是什么"></p><p>从图中我们就可以鲜明的看到流是怎么工作的：</p><ul><li>goods 集合提供了元素序列的数据源，通过 stream() 方法获得 Stream</li><li>filter / sorted / limit 进行数据处理，“连接起来” 构成 “流水线”</li><li>forEach 最终执行</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码示例</span></span><br><span class="line"> goods.stream<span class="comment">()</span>  </span><br><span class="line">    .filter<span class="comment">(c -&gt; c.getPrice()</span> &gt; <span class="number">500</span> &amp;&amp; c.getSales<span class="comment">()</span> &lt; <span class="number">200</span>)  </span><br><span class="line">    .sorted<span class="comment">(Comparator.comparing(Good::getPrice)</span>.reversed<span class="comment">()</span>)  </span><br><span class="line">    .limit<span class="comment">(10)</span>  </span><br><span class="line">    .forEach<span class="comment">(c -&gt; &#123; c.setPrice(c.getPrice()</span> / <span class="number">2</span>); &#125;);</span><br></pre></td></tr></table></figure><p>通过对比集合中的迭代器我们会发现，流的理念更加清晰与透彻，容易理解，工作效率更高。</p><blockquote><p><strong>个人想法：</strong>集合好比是一个储物空间(容器)，什么东西(对象)都可以往里面放，当我们需要的时候就往里面取，怎么取？用标签(索引)去取，OK。那假如我们需要找出里面最特变的那个，或者从中筛选出符合某种特征一类，或者给他们分分类，排排序什么的我们该怎么办？是不是需要一遍遍的去翻找，这就很麻烦。假如我们换一种思路，我们有一个流水线(管道)，在需要对集合中的元素进行操作的时候，我们就把这些元素放到这个流水线上(变成流)，我们需要进行诸如过滤，排序等操作时，只需要在这条流水线上同时操作，那么工作效率将会得到很大的提高。</p></blockquote><blockquote><p><strong>不留误区：</strong>很多时候我们会有这样的误区，既然集合是用来存储对象的，那么流也是用来存储对象的，其实个人认为这种认知是不地道的。流其实是为了方便操作集合中的元素而存在的，流是一种一次性消耗品(就比如岁月如水，过了就是过了)，进行了一次操作，完成了它的使命，自然也就消亡了，所以自始至终数据都还好端端的保存在数据源中(数组或集合中)，这就是为什么说<strong>流本身不修改数据源</strong></p></blockquote><blockquote><p><strong>加深印象</strong></p></blockquote><blockquote><ul><li>不存储数据。 流不是一个存储元素的数据结构。 它只是传递源(source)的数据。</li><li>功能性的(Functional in nature)。 在流上操作只是产生一个结果，不会修改源。 例如filter只是生成一个筛选后的stream，不会删除源里的元素。</li><li>延迟搜索。 许多流操作， 如filter， map等，都是延迟执行。 中间操作总是lazy的。</li><li>Stream可能是无界的。 而集合总是有界的(元素数量是有限大小)。 短路操作如limit(n) ， findFirst()可以在有限的时间内完成在无界的stream</li><li>可消费的(Consumable)。 流的元素在流的声明周期内只能访问一次。 再次访问只能再重新从源中生成一个Stream</li></ul></blockquote><hr><h2 id="2-Java-8-为什么引入-Stream-API"><a href="#2-Java-8-为什么引入-Stream-API" class="headerlink" title="2. Java 8 为什么引入 Stream API"></a>2. Java 8 为什么引入 Stream API</h2><ul><li>在使用集合中的Iterator遍历集合，完成相关聚合应用逻辑操作时效率低下，笨拙</li><li>与lambda表达式结合可以对集合对象进行各种非常便利，高效的聚合操作，或者大批量的数据操作</li><li>提供串行和并发两种聚合操作模式，并发能充分利用多核处理器优势，加速处理过程，利于写出高性能的并发程序。</li></ul><p><strong>Stream是一个函数式语言+多核时代综合影响的产物</strong></p><h2 id="3-什么是聚合操作"><a href="#3-什么是聚合操作" class="headerlink" title="3. 什么是聚合操作"></a>3. 什么是聚合操作</h2><p>或许第一次听说“聚合操作”这个术语时很多人都会觉得陌生，误以为这是一种多么高大上的操作。实际上，“聚合”一直广泛的应用于程序员的开发之中，比如关系型数据库中的一些操作就是“聚合操作”：</p><ul><li>客户每月平均消费金额  ——   平均值</li><li>最昂贵的在售商品     ——  最值</li><li>本周完成的有效订单   ——  去除特殊值</li><li>取十个数据样本作为首页推荐  —— 截取一段数据</li></ul><blockquote><p>典型事例：在关系型数据库中，我们可以使用sql语句的 sum max min avg distinct 等函数实现聚合操作</p></blockquote><p><strong>加深理解：</strong>聚合操作（也称为折叠）是接受一个元素序列为输入，反复使用某个合并操作，把序列中的元素合并成一个汇总的结果。比如查找一个数字列表的总和或者最大值，或者把这些数字累积成一个List对象。Stream接口有一些通用的聚合操作，比如reduce()和collect()；也有一些特定用途的汇聚操作，比如sum(),max()和count()。<strong>注意：sum方法不是所有的Stream对象都有的，只有IntStream、LongStream和DoubleStream是实例才有</strong>。</p><h2 id="4-流的两种操作类型"><a href="#4-流的两种操作类型" class="headerlink" title="4. 流的两种操作类型"></a>4. 流的两种操作类型</h2><h3 id="4-1-了解原理"><a href="#4-1-了解原理" class="headerlink" title="4.1 了解原理"></a>4.1 了解原理</h3><ul><li><strong>Intermediate(中间操作)：</strong>中间操作可以用来执行一系列动作的管道。一个流后面跟随零个或多个中间操作(Intermediate),主要目的是为了打开流，做出某种程度的数据映射(过滤)，然后返回一个新的流，交给下一个操作使用。这类操作是惰性化的(lazy),也就是说，仅仅调用这类方法，并没有真正开始流的遍历。<strong>换句话说，中间操作不是立即发生的，相反，当在中间操作创建的新流上执行完终端操作后，中间操作指定的操作才会发生——这种机制称为延迟行为</strong>，所以中间操作是延迟发生的，延迟行为让流 API 能更加高效地执行。</li><li><strong>Terminal(终端操作):</strong>终端操作会消费流，该操作用于产生结果，例如找出流中的最值。一个流中只能有一个terminal操作，当这个操作执行完成后，流就被消费光了，表示流已经死亡，无法使用。所以终端操作必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果。</li><li><strong>short-circuiting(短路操作):</strong>尽早结束对流的操作，不必检查所有元素<ul><li>对于一个Intermediate操作，接受一个无限大的流(infinite/unbounded)的Stream，返回一个有限的Stream。</li><li>对于一个Terminal操作，接受一个无限大的Stream，但能在有限的时间中计算出结果。</li></ul></li></ul><hr><p><strong>深度剖析，不留遗憾：</strong><br>在中间操作原理讲解中，有一句话标注了黑体。如果我们细心一点的话也许会发现一个问题：终端操作是一个遍历流的过程，意味着流的死亡，那为什么还说中间操作是在其创建的流在执行终端操作后才执行？不是说流被消耗后就不能使用了吗？为什么这种延迟执行反而提高了效率呢？难道这句话有矛盾？其实，这句话是绝对正确的，且听我娓娓道来：</p><ul><li>延迟执行的效率：其实，在原理中解释的已经很清楚了，中间操作是 lazy 的，多个中间操作(诸如排序，过滤等)只会在Terminal操作的时候融合起来，一次循环完成。简单理解为，Stream里有个操作函数的集合，每次中间操作就把转换函数放入到这个集合中，在Terminal操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。（想想生活中的例子，建筑工地施工，是等材料到齐了开工效率高还是来了一部分材料就开工效率高）</li><li>终端操作执行完后执行中间操作：或许理解了延迟执行也就理解了这一点，就不过多赘述了。你只要清楚一点，效率至上，谁先执行，谁后执行，效率说了算。</li></ul><hr><p><strong>代码示例</strong><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">sum</span> = widgets.stream()</span><br><span class="line">.filter(w -&gt; w.getColor() == RED)</span><br><span class="line">.mapToInt(w -&gt; w.getWeight())</span><br><span class="line">.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">stream() 获取当前小物件的 source，filter 和 mapToInt 为 intermediate 操作，进行数据筛选和转换，最后一个 <span class="built_in">sum</span>() 为 terminal 操作，对符合条件的全部小物件作重量求和。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="4-2-两种操作方法分类"><a href="#4-2-两种操作方法分类" class="headerlink" title="4.2 两种操作方法分类"></a>4.2 两种操作方法分类</h3><ul><li><p><strong>Intermediate：</strong><br>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p></li><li><p><strong>Terminal：</strong><br>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p></li><li><p><strong>Short-circuiting:</strong><br>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</p></li></ul><h2 id="5-流的使用"><a href="#5-流的使用" class="headerlink" title="5. 流的使用"></a>5. 流的使用</h2><h3 id="5-1-几个重要的流接口概要"><a href="#5-1-几个重要的流接口概要" class="headerlink" title="5.1 几个重要的流接口概要"></a>5.1 几个重要的流接口概要</h3><p>流 API 的定义的接口包含在 java.util.stream 中。<strong>BaseStream</strong> 是基础接口，它定义了所有流都可以使用的基本功能，声明如下<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="keyword">BaseStream&lt;T, </span>S <span class="keyword">extends </span><span class="keyword">BaseStream&lt;T, </span>S&gt;&gt;</span><br><span class="line">T 指定流元素的类型，S 指定扩展了 <span class="keyword">BaseStream </span>的流的类型。</span><br><span class="line">思考：既然是流，是否需要关闭？</span><br><span class="line">回答：只有当使用的数据源需要关闭时(如流连接到文件)，才需要关闭流。大多数时候，例如数据源是集合或数组时，不需要关闭流。</span><br></pre></td></tr></table></figure></p><p><strong>BaseStream</strong> 下派生出的接口<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.interface</span> Stream&lt;T&gt; <span class="comment">//对象流，使用最为普遍，操作的是对象的引用，本章知识重点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如下几个流是对 BaseStream 的扩展，类似于 Stream，只是操作的是基本类型</span></span><br><span class="line"><span class="number">2</span><span class="selector-class">.interface</span> DoubleStream</span><br><span class="line"><span class="number">3</span><span class="selector-class">.interface</span> IntStream</span><br><span class="line"><span class="number">4</span><span class="selector-class">.interface</span> LongStream</span><br></pre></td></tr></table></figure></p><h3 id="5-2-获取流的几种方式"><a href="#5-2-获取流的几种方式" class="headerlink" title="5.2 获取流的几种方式"></a>5.2 获取流的几种方式</h3><h4 id="5-2-1-从集合获取流"><a href="#5-2-1-从集合获取流" class="headerlink" title="5.2.1 从集合获取流"></a>5.2.1 从集合获取流</h4><p>从集合中获取流是最为普遍的做法：主要 stream() 和 paralleStream()方法<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 Collection 中获取流</span></span><br><span class="line"><span class="built_in">List</span>&lt;People&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;People&gt;();</span><br><span class="line"><span class="built_in">list</span>.add(<span class="literal">new</span> people(<span class="string">"xiaoming"</span>, <span class="number">12</span>));</span><br><span class="line"><span class="built_in">list</span>.add(<span class="literal">new</span> people(<span class="string">"xiaohua"</span>, <span class="number">15</span>));</span><br><span class="line"><span class="built_in">list</span>.add(<span class="literal">new</span> people(<span class="string">"xiaogan"</span>, <span class="number">18</span>));</span><br><span class="line">            ···</span><br><span class="line">stream = <span class="built_in">list</span>.stream();</span><br></pre></td></tr></table></figure></p><h4 id="5-2-2-从数组获取流"><a href="#5-2-2-从数组获取流" class="headerlink" title="5.2.2 从数组获取流"></a>5.2.2 从数组获取流</h4><p>流不但可以从集合获取，还可以直接从数组中获取流，Java 8 为Arrays类添加了 stream() 方法获取流<br>Stream类的静态工厂方法： Stream.of(Object[]), IntStream.range(int, int)， Stream.iterate(Object, UnaryOperator);<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 调用静态的 of()方法 返回指定元素的顺序排序流</span></span><br><span class="line"> <span class="built_in">Stream</span> stream = <span class="built_in">Stream</span>.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 调用 Arrays 类中的 stream() 方法从数组中获取一个顺序流</span></span><br><span class="line"><span class="keyword">String</span>[] strArray = <span class="keyword">new</span> <span class="keyword">String</span>[] &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br><span class="line">stream = <span class="built_in">Stream</span>.of(strArray);</span><br><span class="line">stream = Arrays.stream(strArray);</span><br><span class="line"></span><br><span class="line">IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).forEach(System.out::<span class="built_in">println</span>);</span><br><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::<span class="built_in">println</span>);</span><br><span class="line">IntStream.rangeClosed(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::<span class="built_in">println</span>);</span><br></pre></td></tr></table></figure></p><h4 id="5-2-3-其他获取流的方法-了解"><a href="#5-2-3-其他获取流的方法-了解" class="headerlink" title="5.2.3 其他获取流的方法(了解)"></a>5.2.3 其他获取流的方法(了解)</h4><ul><li>文件行 BufferedReader.lines()</li><li>Files类的获取文件路径列表： find(), lines(), list(), walk()</li><li>Random.ints() 随机数流， 无界的</li><li>BitSet.stream(), Pattern.splitAsStream(java.lang.CharSequence)，JarFile.stream()</li><li>通过StreamSupport辅助类从spliterator产生流</li></ul><h3 id="5-3-流转换为其他数据结构"><a href="#5-3-流转换为其他数据结构" class="headerlink" title="5.3 流转换为其他数据结构"></a>5.3 流转换为其他数据结构</h3><p>我们可以把数组或者集合转换为流，同样的也可以把流转换为数组或者集合。</p><h4 id="5-3-1-将流装换为数组"><a href="#5-3-1-将流装换为数组" class="headerlink" title="5.3.1 将流装换为数组"></a>5.3.1 将流装换为数组</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span>[] strArray = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"asd"</span>, <span class="string">"wer"</span>, <span class="string">"wey"</span>, <span class="string">"ppu"</span>&#125;</span><br><span class="line"><span class="built_in">Stream</span> stream = <span class="built_in">Stream</span>.of(strArray)</span><br><span class="line">        ···</span><br><span class="line"><span class="keyword">String</span>[] strArry1 = stream.toArray(<span class="keyword">String</span>[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="5-3-2-将流转换为集合-收集——collect方法的使用"><a href="#5-3-2-将流转换为集合-收集——collect方法的使用" class="headerlink" title="5.3.2 将流转换为集合(收集——collect方法的使用)"></a>5.3.2 将流转换为集合(收集——collect方法的使用)</h4><p>将流转换为集合的过程称为收集(可以理解为从管道中捞取)，这时我们需要使用一个很重要的方法 collect()，定义如下：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法是Stream中的终端方法，用于返回一个集合(各种集合)</span></span><br><span class="line">&lt;R,A&gt; R collect<span class="comment">(Collector&lt;? super T,A,R&gt; collector)</span></span><br><span class="line">R 指定结果的类型，T 指定调用流的元素类型， A 指定一个可变的累积类型<span class="comment">(一个累积的容器)</span></span><br></pre></td></tr></table></figure></p><p>在Java API中为我们提供了一个 Collectors 工具类，里面提供了关于流操作的一些静态方法，如 toList()，toMap()，toSet()，toCollection() 等将流装换为集合的方法</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String[] </span><span class="keyword">strArray </span>= new <span class="keyword">String[]&#123;"asd", </span><span class="string">"wer"</span>, <span class="string">"wey"</span>, <span class="string">"ppu"</span>&#125;</span><br><span class="line"><span class="keyword">Stream </span><span class="keyword">stream </span>= <span class="keyword">Stream.of(strArray)</span></span><br><span class="line"><span class="keyword"> </span>       ···</span><br><span class="line"><span class="symbol">List</span>&lt;<span class="keyword">String&gt; </span>list1 = <span class="keyword">stream.collect(Collectors.toList());</span></span><br><span class="line"><span class="keyword">List&lt;String&gt; </span>list2 = <span class="keyword">stream.collect(Collectors.toCollection(ArrayList::new));</span></span><br><span class="line"><span class="keyword">Set </span>set1 = <span class="keyword">stream.collect(Collectors.toSet());</span></span><br><span class="line"><span class="keyword">Stack </span>stack1 = <span class="keyword">stream.collect(Collectors.toCollection(Stack::new));</span></span><br></pre></td></tr></table></figure><hr><h4 id="5-3-3-将流转换为字符串"><a href="#5-3-3-将流转换为字符串" class="headerlink" title="5.3.3 将流转换为字符串"></a>5.3.3 将流转换为字符串</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String[] </span><span class="keyword">strArray </span>= new <span class="keyword">String[]&#123;"asd", </span><span class="string">"wer"</span>, <span class="string">"wey"</span>, <span class="string">"ppu"</span>&#125;</span><br><span class="line"><span class="keyword">Stream </span><span class="keyword">stream </span>= <span class="keyword">Stream.of(strArray)</span></span><br><span class="line"><span class="keyword"> </span>       ···</span><br><span class="line"><span class="keyword">String </span><span class="keyword">str </span>= <span class="keyword">stream.collect(Collection.joining()).toString();</span></span><br></pre></td></tr></table></figure><h3 id="5-4-中间操作-转换操作-解析"><a href="#5-4-中间操作-转换操作-解析" class="headerlink" title="5.4 中间操作(转换操作)解析"></a>5.4 中间操作(转换操作)解析</h3><p>中间操作在流的使用中非常频繁，如下是几个常用的转换方法：</p><ul><li><p><strong>filter：</strong>对流中的元素使用给定的过滤函数进行过滤操作，新生成的流中只包含符合条件的元素<br>filter示意图如下：<br><img src="http://img03.taobaocdn.com/imgextra/i3/90219132/T2OxXnXPlXXXXXXXXX_!!90219132.jpg" alt="filter示意图"></p></li><li><p><strong>map():</strong>对流中包含的元素使用给定的转换函数进行转换操作，新生成的流只包含转换生成的元素。该方法有三个变种方法：<strong>mapToInt(),mapToLong(),mapToDouble()</strong><br>map 示意图如下：<br><img src="http://img03.taobaocdn.com/imgextra/i3/90219132/T2PQJnXOJXXXXXXXXX_!!90219132.jpg" alt="map示意图"></p></li><li><p><strong>flatMap():</strong>类似于map()，不过该方法是一对多的替换元素，并将替换的元素平坦的化为新流<br>flatMap示意图如下：<br><img src="http://img01.taobaocdn.com/imgextra/i1/90219132/T2mBXnXQhXXXXXXXXX_!!90219132.jpg" alt="flatMap示意图"></p></li><li><p><strong>distinct:</strong>对流中包含的元素进行去重操作(去除重复的元素)，新生成的流中将没有重复的元素<br>distinct示意图如下：<br><img src="http://img04.taobaocdn.com/imgextra/i4/90219132/T2K0lnXPRXXXXXXXXX_!!90219132.jpg" alt="distinct示意图"></p></li><li><p><strong>peek:</strong>返回由该流的元素组成的流，另外在消耗流中的每个元素时执行提供的操作。该方法主要用于调试使用<br>peek示意图如下：<br><img src="http://img03.taobaocdn.com/imgextra/i3/90219132/T2DrFmXHtaXXXXXXXX_!!90219132.jpg" alt="peek示意图"></p></li></ul><hr><p><strong>代码示例</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Stream</span>.of(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>) .filter(e -&gt; e.length() &gt; <span class="number">3</span>) .<span class="built_in">peek</span>(e -&gt; System.out.<span class="built_in">println</span>(<span class="string">"Filtered value: "</span> + e)) .<span class="built_in">map</span>(<span class="keyword">String</span>::toUpperCase) .<span class="built_in">peek</span>(e -&gt; System.out.<span class="built_in">println</span>(<span class="string">"Mapped value: "</span> + e)) .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><hr><ul><li><p><strong>limit:</strong>对流进行截断操作，获取流中的前N个元素，如果流中的元素个数小于N，则获取所有的元素<br>limit示意图如下：<br><img src="http://img02.taobaocdn.com/imgextra/i2/90219132/T2QAXlXJBaXXXXXXXX_!!90219132.jpg" alt="limit示意图"></p></li><li><p><strong>skip:</strong>与limit的效果相反。返回一个丢弃原Stream的前N个元素后剩下元素所组成的新流，如果原Stream中包含的元素个数小于N，那么返回一个空Stream<br>skip示意图如下：<br><img src="http://img04.taobaocdn.com/imgextra/i4/90219132/T24A8mXUJXXXXXXXXX_!!90219132.jpg" alt="skip示意图"></p></li></ul><hr><p><strong>代码示例</strong>(综合了上面的方法)<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = new ArrayList&lt;&gt;();</span><br><span class="line">          nums.<span class="builtin-name">add</span>(1);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(<span class="literal">null</span>);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(2);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(1); </span><br><span class="line">          nums.<span class="builtin-name">add</span>(4);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(3);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(<span class="literal">null</span>);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(5);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(6);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(7);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(8);</span><br><span class="line">          nums.<span class="builtin-name">add</span>(9);</span><br><span class="line"></span><br><span class="line">          System.out.println(<span class="string">"sums is : "</span> + nums.stream().filter(num -&gt; num != <span class="literal">null</span>).distinct()</span><br><span class="line">                  .mapToInt(num -&gt; num * 2).</span><br><span class="line">                          peek(System.out::println).skip(2).limit(4).sum());</span><br></pre></td></tr></table></figure></p><hr><h3 id="5-5-终止-汇聚-操作解析"><a href="#5-5-终止-汇聚-操作解析" class="headerlink" title="5.5 终止(汇聚)操作解析"></a>5.5 终止(汇聚)操作解析</h3><ul><li><p><strong>anyMatch / allMatch / noneMatch</strong><br>allMatch：Stream 中全部元素符合传入的 predicate，返回 true<br>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true<br>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; persons = new ArrayList();</span><br><span class="line">persons.add(new Person(<span class="number">1</span>, <span class="string">"name"</span> + <span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">persons.add(new Person(<span class="number">2</span>, <span class="string">"name"</span> + <span class="number">2</span>, <span class="number">21</span>));</span><br><span class="line">persons.add(new Person(<span class="number">3</span>, <span class="string">"name"</span> + <span class="number">3</span>, <span class="number">34</span>));</span><br><span class="line">persons.add(new Person(<span class="number">4</span>, <span class="string">"name"</span> + <span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line">persons.add(new Person(<span class="number">5</span>, <span class="string">"name"</span> + <span class="number">5</span>, <span class="number">55</span>));</span><br><span class="line">boolean isAllAdult = persons.stream().</span><br><span class="line"> allMatch(p -&gt; p.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">System.out.println(<span class="string">"All are adult? "</span> + isAllAdult);</span><br><span class="line">boolean isThereAnyChild = persons.stream().</span><br><span class="line"> anyMatch(p -&gt; p.getAge() &lt; <span class="number">12</span>);</span><br><span class="line">System.out.println(<span class="string">"Any child? "</span> + isThereAnyChild);</span><br></pre></td></tr></table></figure></li><li><p><strong>count / min / max</strong><br>count：得到元素的数量<br>max：取得元素中的最大值<br>min：取得元素中的最小值</p></li><li><p><strong>findAny / findFirst /forEach</strong><br>findAny：返回流中的任意一个元素<br>findFirst：返回流中的第一个元素<br>forEach：遍历流</p></li></ul><h3 id="5-6-使用流的基本步骤"><a href="#5-6-使用流的基本步骤" class="headerlink" title="5.6 使用流的基本步骤"></a>5.6 使用流的基本步骤</h3><p>也许听了上面关于中间操作，终端操作会有点懵，在自己写代码的时候可能感觉无从下手，或许你就可以按照下面的步骤了</p><ul><li>创建流(Stream)</li><li>中间操作(转换Stream)，每次转换原有的Stream对象不变，返回一个新的Stream对象</li><li>终端操作,获取结果</li></ul><p>Stream通用语法剖析示意图：<br><img src="http://img04.taobaocdn.com/imgextra/i4/90219132/T2ycFgXQ8XXXXXXXXX_!!90219132.jpg" alt="Stream通用语法剖析示意图"></p><h3 id="5-7-流的迭代器"><a href="#5-7-流的迭代器" class="headerlink" title="5.7 流的迭代器"></a>5.7 流的迭代器</h3><p>虽然流不是数据存储对象，但是仍然可以使用迭代器来遍历元素，就如同使用迭代器遍历集合中的元素一样。流 API 支持两类迭代器，一类是传统的 Iterator，另一类是 JDK 8新增的 Spliterator.</p><ul><li><strong>使用Iterator</strong><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">String</span>&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"sdk"</span>);</span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"ffg"</span>);</span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"kko"</span>); </span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"mmp"</span>);</span><br><span class="line">         nums.<span class="built_in">add</span>(<span class="string">"kkl"</span>);</span><br><span class="line">         </span><br><span class="line">         Stream&lt;<span class="keyword">String</span>&gt; myStream = nums.stream();</span><br><span class="line">         </span><br><span class="line">         Iterator&lt;<span class="keyword">String</span>&gt; itr = myStream.iterator();</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">while</span>(itr.hasNext())&#123;</span><br><span class="line">           System.out.<span class="built_in">println</span>(itr.next());</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>使用 Spliterator :</strong>可以替代 Iterator，在涉及并行处理时更加方便。<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">          nums.add(<span class="string">"sdk"</span>);</span><br><span class="line">          nums.add(<span class="string">"ffg"</span>);</span><br><span class="line">          nums.add(<span class="string">"kko"</span>); </span><br><span class="line">          nums.add(<span class="string">"mmp"</span>);</span><br><span class="line">          nums.add(<span class="string">"kkl"</span>);</span><br><span class="line">          </span><br><span class="line">          Stream&lt;String&gt; myStream = nums.stream();</span><br><span class="line">          </span><br><span class="line">          Spliterator&lt;String&gt; splitItr = myStream.spliterator();</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">while</span><span class="function"><span class="params">(splitItr.tryAdvance((n) -&gt; Syatem.out.println(n)))</span>;</span></span><br><span class="line"><span class="function">          <span class="title">splitItr</span>.<span class="title">forEachRemain</span><span class="params">((n) -&gt; Syatem.out.println(n))</span>)</span></span><br><span class="line"><span class="function">          </span></span><br><span class="line"><span class="function">          关于<span class="title">tryAdvance</span></span></span><br><span class="line"><span class="function">          定义：<span class="title">boolean</span> <span class="title">tryAdvance</span><span class="params">(Comsumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span></span><br><span class="line"><span class="function">          <span class="title">action</span> 指代了在迭代器中的下一个元素上执行的操作。如果有下一个元素，<span class="title">tryAdvance</span><span class="params">()</span>返回<span class="title">true</span>，否则返回<span class="title">false</span>。</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>参考书籍</strong><br>疯狂Java讲义<br>Java 8编程参考官方教程</p><p><strong>参考文档</strong><br><a href="http://www.importnew.com/20331.html" target="_blank" rel="noopener">http://www.importnew.com/20331.html</a><br><a href="http://www.importnew.com/16545.html" target="_blank" rel="noopener">http://www.importnew.com/16545.html</a><br><a href="http://www.iteye.com/news/32782" target="_blank" rel="noopener">http://www.iteye.com/news/32782</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是Stream-“流”-？&quot;&gt;&lt;a href=&quot;#1-什么是Stream-“流”-？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是Stream(“流”)？&quot;&gt;&lt;/a&gt;1. 什么是Stream(“流”)？&lt;/h2&gt;&lt;p&gt; &lt;strong&gt;官方正解“流”的概念：&lt;/strong&gt;流是数据的渠道。流代表了一个对象序列。流操作数据源，如数组或集合。&lt;strong&gt;流本身不存储数据，而只是移动数据&lt;/strong&gt;，在移动过程中可能会对数据执行过滤，排序或其他操作。然而一般来说，&lt;strong&gt;流本身不修改数据源(集合，数组，I/O channel， 产生器generator )&lt;/strong&gt;对流排序不会修改数据源的排序；相反，对流排序会创建一个新流，其中包含排序后的结果。&lt;br&gt; &lt;strong&gt;通俗理解(浅显)：&lt;/strong&gt; Stream 是元素的集合，类似于集合中的迭代器——Iterator，不过是高级版本的迭代器&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;理解流是什么&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://dl2.iteye.com/upload/attachment/0127/9524/1f361980-f122-3629-a374-7a849e82c5af.png&quot; alt=&quot;流是什么&quot;&gt;&lt;/p&gt;
&lt;p&gt;从图中我们就可以鲜明的看到流是怎么工作的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;goods 集合提供了元素序列的数据源，通过 stream() 方法获得 Stream&lt;/li&gt;
&lt;li&gt;filter / sorted / limit 进行数据处理，“连接起来” 构成 “流水线”&lt;/li&gt;
&lt;li&gt;forEach 最终执行&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//代码示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; goods.stream&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .filter&lt;span class=&quot;comment&quot;&gt;(c -&amp;gt; c.getPrice()&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt; &amp;amp;&amp;amp; c.getSales&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .sorted&lt;span class=&quot;comment&quot;&gt;(Comparator.comparing(Good::getPrice)&lt;/span&gt;.reversed&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .limit&lt;span class=&quot;comment&quot;&gt;(10)&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .forEach&lt;span class=&quot;comment&quot;&gt;(c -&amp;gt; &amp;#123; c.setPrice(c.getPrice()&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过对比集合中的迭代器我们会发现，流的理念更加清晰与透彻，容易理解，工作效率更高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;个人想法：&lt;/strong&gt;集合好比是一个储物空间(容器)，什么东西(对象)都可以往里面放，当我们需要的时候就往里面取，怎么取？用标签(索引)去取，OK。那假如我们需要找出里面最特变的那个，或者从中筛选出符合某种特征一类，或者给他们分分类，排排序什么的我们该怎么办？是不是需要一遍遍的去翻找，这就很麻烦。假如我们换一种思路，我们有一个流水线(管道)，在需要对集合中的元素进行操作的时候，我们就把这些元素放到这个流水线上(变成流)，我们需要进行诸如过滤，排序等操作时，只需要在这条流水线上同时操作，那么工作效率将会得到很大的提高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不留误区：&lt;/strong&gt;很多时候我们会有这样的误区，既然集合是用来存储对象的，那么流也是用来存储对象的，其实个人认为这种认知是不地道的。流其实是为了方便操作集合中的元素而存在的，流是一种一次性消耗品(就比如岁月如水，过了就是过了)，进行了一次操作，完成了它的使命，自然也就消亡了，所以自始至终数据都还好端端的保存在数据源中(数组或集合中)，这就是为什么说&lt;strong&gt;流本身不修改数据源&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;加深印象&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不存储数据。 流不是一个存储元素的数据结构。 它只是传递源(source)的数据。&lt;/li&gt;
&lt;li&gt;功能性的(Functional in nature)。 在流上操作只是产生一个结果，不会修改源。 例如filter只是生成一个筛选后的stream，不会删除源里的元素。&lt;/li&gt;
&lt;li&gt;延迟搜索。 许多流操作， 如filter， map等，都是延迟执行。 中间操作总是lazy的。&lt;/li&gt;
&lt;li&gt;Stream可能是无界的。 而集合总是有界的(元素数量是有限大小)。 短路操作如limit(n) ， findFirst()可以在有限的时间内完成在无界的stream&lt;/li&gt;
&lt;li&gt;可消费的(Consumable)。 流的元素在流的声明周期内只能访问一次。 再次访问只能再重新从源中生成一个Stream&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-Java-8-为什么引入-Stream-API&quot;&gt;&lt;a href=&quot;#2-Java-8-为什么引入-Stream-API&quot; class=&quot;headerlink&quot; title=&quot;2. Java 8 为什么引入 Stream API&quot;&gt;&lt;/a&gt;2. Java 8 为什么引入 Stream API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在使用集合中的Iterator遍历集合，完成相关聚合应用逻辑操作时效率低下，笨拙&lt;/li&gt;
&lt;li&gt;与lambda表达式结合可以对集合对象进行各种非常便利，高效的聚合操作，或者大批量的数据操作&lt;/li&gt;
&lt;li&gt;提供串行和并发两种聚合操作模式，并发能充分利用多核处理器优势，加速处理过程，利于写出高性能的并发程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Stream是一个函数式语言+多核时代综合影响的产物&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-什么是聚合操作&quot;&gt;&lt;a href=&quot;#3-什么是聚合操作&quot; class=&quot;headerlink&quot; title=&quot;3. 什么是聚合操作&quot;&gt;&lt;/a&gt;3. 什么是聚合操作&lt;/h2&gt;&lt;p&gt;或许第一次听说“聚合操作”这个术语时很多人都会觉得陌生，误以为这是一种多么高大上的操作。实际上，“聚合”一直广泛的应用于程序员的开发之中，比如关系型数据库中的一些操作就是“聚合操作”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户每月平均消费金额  ——   平均值&lt;/li&gt;
&lt;li&gt;最昂贵的在售商品     ——  最值&lt;/li&gt;
&lt;li&gt;本周完成的有效订单   ——  去除特殊值&lt;/li&gt;
&lt;li&gt;取十个数据样本作为首页推荐  —— 截取一段数据&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;典型事例：在关系型数据库中，我们可以使用sql语句的 sum max min avg distinct 等函数实现聚合操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;加深理解：&lt;/strong&gt;聚合操作（也称为折叠）是接受一个元素序列为输入，反复使用某个合并操作，把序列中的元素合并成一个汇总的结果。比如查找一个数字列表的总和或者最大值，或者把这些数字累积成一个List对象。Stream接口有一些通用的聚合操作，比如reduce()和collect()；也有一些特定用途的汇聚操作，比如sum(),max()和count()。&lt;strong&gt;注意：sum方法不是所有的Stream对象都有的，只有IntStream、LongStream和DoubleStream是实例才有&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;4-流的两种操作类型&quot;&gt;&lt;a href=&quot;#4-流的两种操作类型&quot; class=&quot;headerlink&quot; title=&quot;4. 流的两种操作类型&quot;&gt;&lt;/a&gt;4. 流的两种操作类型&lt;/h2&gt;&lt;h3 id=&quot;4-1-了解原理&quot;&gt;&lt;a href=&quot;#4-1-了解原理&quot; class=&quot;headerlink&quot; title=&quot;4.1 了解原理&quot;&gt;&lt;/a&gt;4.1 了解原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intermediate(中间操作)：&lt;/strong&gt;中间操作可以用来执行一系列动作的管道。一个流后面跟随零个或多个中间操作(Intermediate),主要目的是为了打开流，做出某种程度的数据映射(过滤)，然后返回一个新的流，交给下一个操作使用。这类操作是惰性化的(lazy),也就是说，仅仅调用这类方法，并没有真正开始流的遍历。&lt;strong&gt;换句话说，中间操作不是立即发生的，相反，当在中间操作创建的新流上执行完终端操作后，中间操作指定的操作才会发生——这种机制称为延迟行为&lt;/strong&gt;，所以中间操作是延迟发生的，延迟行为让流 API 能更加高效地执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terminal(终端操作):&lt;/strong&gt;终端操作会消费流，该操作用于产生结果，例如找出流中的最值。一个流中只能有一个terminal操作，当这个操作执行完成后，流就被消费光了，表示流已经死亡，无法使用。所以终端操作必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;short-circuiting(短路操作):&lt;/strong&gt;尽早结束对流的操作，不必检查所有元素&lt;ul&gt;
&lt;li&gt;对于一个Intermediate操作，接受一个无限大的流(infinite/unbounded)的Stream，返回一个有限的Stream。&lt;/li&gt;
&lt;li&gt;对于一个Terminal操作，接受一个无限大的Stream，但能在有限的时间中计算出结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;深度剖析，不留遗憾：&lt;/strong&gt;&lt;br&gt;在中间操作原理讲解中，有一句话标注了黑体。如果我们细心一点的话也许会发现一个问题：终端操作是一个遍历流的过程，意味着流的死亡，那为什么还说中间操作是在其创建的流在执行终端操作后才执行？不是说流被消耗后就不能使用了吗？为什么这种延迟执行反而提高了效率呢？难道这句话有矛盾？其实，这句话是绝对正确的，且听我娓娓道来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;延迟执行的效率：其实，在原理中解释的已经很清楚了，中间操作是 lazy 的，多个中间操作(诸如排序，过滤等)只会在Terminal操作的时候融合起来，一次循环完成。简单理解为，Stream里有个操作函数的集合，每次中间操作就把转换函数放入到这个集合中，在Terminal操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。（想想生活中的例子，建筑工地施工，是等材料到齐了开工效率高还是来了一部分材料就开工效率高）&lt;/li&gt;
&lt;li&gt;终端操作执行完后执行中间操作：或许理解了延迟执行也就理解了这一点，就不过多赘述了。你只要清楚一点，效率至上，谁先执行，谁后执行，效率说了算。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;代码示例&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight coq&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int &lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt; = widgets.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.filter(w -&amp;gt; w.getColor() == RED)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.mapToInt(w -&amp;gt; w.getWeight())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stream() 获取当前小物件的 source，filter 和 mapToInt 为 intermediate 操作，进行数据筛选和转换，最后一个 &lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt;() 为 terminal 操作，对符合条件的全部小物件作重量求和。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java 8 新特性" scheme="http://yoursite.com/tags/java-8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
</feed>
